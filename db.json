{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/images/solution.png","path":"images/solution.png","modified":1,"renderable":0},{"_id":"source/images/error.png","path":"images/error.png","modified":1,"renderable":0},{"_id":"source/images/SpringModules.png","path":"images/SpringModules.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"71c00d274b52b9b629cc66f8b3cdf1aa488dc6ba","modified":1483181547000},{"_id":"source/.DS_Store","hash":"495dc0d217dbc3e7cb0c015a4aa9af3e7011d37f","modified":1492792959000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1483181547000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1483181547000},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1483181547000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1483181547000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1483181547000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1483181547000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1483181547000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1483181547000},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1483181547000},{"_id":"themes/next/_config.yml","hash":"c01570812007651ef895ab17a61ac618f8b12dd0","modified":1483201412000},{"_id":"themes/next/gulpfile.coffee","hash":"61ef0606a8134894d7ac796bc8d0fa4ba6a94483","modified":1483181547000},{"_id":"themes/next/package.json","hash":"877cb98025e59015532c4c9a04a33e2af4ad56f9","modified":1483181547000},{"_id":"source/_posts/Python装饰器.md","hash":"f2011a888dd4be99280b8c7cf991f8b1c5446def","modified":1492790331000},{"_id":"source/_posts/Spring实战之一：概览.md","hash":"91b23070bcc7c8a92685dd4c7511be94a12700bb","modified":1492793722000},{"_id":"source/_posts/Hello-2017.md","hash":"061ec006b4f9b9c9fb610742039cf99c2b8a2353","modified":1492790331000},{"_id":"source/_posts/Mac下Eclipse编译C-失败.md","hash":"5c5b9fdbbffa275a364308c589fa9f39e0a81946","modified":1492790331000},{"_id":"source/_posts/Python文件处理.md","hash":"31f38eef9e0ba1ca775fbb3272ca455356ac414d","modified":1492790331000},{"_id":"source/_posts/Tornado源码学习-httpserver-ioloop.md","hash":"f845da6a99b705c7580c53fd6837c40253c2ec90","modified":1492790331000},{"_id":"source/_posts/pyenv-no-such-command-virtualenv-init.md","hash":"f17d503830b94cf2dab90c449d7c9a237f3512b0","modified":1492790331000},{"_id":"source/categories/index.md","hash":"93e33c6bfea0ae0f8075b8e7dab71ac3f0efc8c0","modified":1483189938000},{"_id":"source/_posts/venv创建python虚拟环境.md","hash":"c7dea5d2ff688a041a2dd1cd52be12737ecea474","modified":1492790331000},{"_id":"source/images/solution.png","hash":"96f8205bfe4e35576d4d61a8de3f9429afb81819","modified":1488639232000},{"_id":"source/tags/index.md","hash":"8f80428753b04353574b149a4c8f26237853590c","modified":1483189948000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1483181547000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1483181547000},{"_id":"themes/next/layout/_layout.swig","hash":"7a1e4443c3ba1e08c20e64ddbf0b8255d034dab0","modified":1483181547000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1483181547000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1483181547000},{"_id":"themes/next/layout/index.swig","hash":"032db48f5a3cfd6f9692fd5952b8a7aea7dad3f7","modified":1483197635000},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1483181547000},{"_id":"themes/next/layout/post.swig","hash":"21a0ff481a3b034ae73d7c0c3712375c4b7254fa","modified":1483197616000},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1483181547000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1483181547000},{"_id":"themes/next/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1483181547000},{"_id":"themes/next/languages/default.yml","hash":"767470a80dc257e23e14c3a78e8c52a46c9d6209","modified":1483181547000},{"_id":"themes/next/languages/en.yml","hash":"40057d6608e825d06e0864bac4dcd27ed88ada87","modified":1483181547000},{"_id":"themes/next/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1483181547000},{"_id":"themes/next/languages/fr-FR.yml","hash":"9fca01ef917d33ae2ae6bc04561ec6799dff5351","modified":1483181547000},{"_id":"themes/next/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1483181547000},{"_id":"themes/next/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1483181547000},{"_id":"themes/next/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1483181547000},{"_id":"themes/next/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1483181547000},{"_id":"themes/next/languages/ru.yml","hash":"257d11e626cbe4b9b78785a764190b9278f95c28","modified":1483181547000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1483181547000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"f6c9fafa0f5f0050cd07ca2cf5e38fbae3e28145","modified":1483181547000},{"_id":"themes/next/languages/zh-hk.yml","hash":"34c84c6d04447a25bd5eac576922a13947c000e2","modified":1483181547000},{"_id":"themes/next/languages/zh-tw.yml","hash":"c97a5c41149de9b17f33439b0ecf0eff6fdae50e","modified":1483181547000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1483181547000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1483181547000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1483181547000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1483181547000},{"_id":"source/images/error.png","hash":"bcba04f69d3a992af00a2d843f4aa1bfccca7653","modified":1488639216000},{"_id":"source/images/SpringModules.png","hash":"b54fed219ca440f5ead9195dcb998dc226cd7532","modified":1492179265000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1483181547000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1483181547000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4eb278f7b1b7dfe1088c2b411778cc6129df82bb","modified":1483181547000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1483181547000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"8773fb83d28000d165b995c3758206b8ce41291c","modified":1483198192000},{"_id":"themes/next/layout/_partials/head.swig","hash":"ca56f92e2fa82b03853869f5073ee1a5626a4796","modified":1483181547000},{"_id":"themes/next/layout/_partials/header.swig","hash":"5696ee15fc21eb3a6416902afcf1df454497c552","modified":1483181547000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"39d613e5a9f8389d4ea52d6082502af8e833b9f2","modified":1483181547000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1483181547000},{"_id":"themes/next/layout/_partials/search.swig","hash":"1431719d1dbba3f5ee385eebc46376d1a960b2d5","modified":1483181547000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1483181547000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1483181547000},{"_id":"themes/next/layout/_macro/post.swig","hash":"3d5b5ea86c71993b58e6e7f80b5c50030ed213bf","modified":1483197469000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"43d8830bb19da4fc7a5773866be19fa066b62645","modified":1483181547000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1483181547000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1483181547000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1483181547000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1483181547000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1483181547000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1483181547000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1483181547000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1483181547000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1483181547000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1483181547000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1483181547000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1483181547000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1483181547000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1483181547000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1483181547000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1483181547000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1483181547000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1483181547000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1483181547000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1483181547000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1483181547000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1483181547000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1483181547000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1483181547000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1483181547000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1483181547000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1483181547000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1483181547000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1483181547000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1483181547000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1483181547000},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1483181547000},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"636f1181dd5887a70b4a08ca8f655d4e46635792","modified":1483181547000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1483181547000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1483181547000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1483181547000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1483181547000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1483181547000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1483181547000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1483181547000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1483181547000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1483181547000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1483181547000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1483181547000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"394d9fff7951287cc90f52acc2d4cbfd1bae079d","modified":1483181547000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"417e16a0fbdcb1b87987787bd7f9fa17eefc2d2b","modified":1483181547000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1483181547000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"b460e27db3dcd4ab40b17d8926a5c4e624f293a9","modified":1483181547000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1483181547000},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1483181547000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1483181547000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1483181547000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"bef514826ebf9eb6e99bb2b0d72285106658a1ec","modified":1483181547000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"3f0d6aa424f434e82ea507f740eeff110f996269","modified":1483181547000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1483181547000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1483181547000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1483181547000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1483181547000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1483181547000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1483181547000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1483181547000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1483181547000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1483181547000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1483181547000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1483181547000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1483181547000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1483181547000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1483181547000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1483181547000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1483181547000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1483181547000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1483181547000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1483181547000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1483181547000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1483181547000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1483181547000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1483181547000},{"_id":"themes/next/source/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1483181547000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"c1072942459fa0880e8a33a1bd929176b62b4171","modified":1483181547000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1483181547000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1483181547000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1483181547000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1483181547000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1483181547000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1483181547000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1483181547000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1483181547000},{"_id":"source/images/avatar.jpg","hash":"f0e7f6eed0c3eab0261af0bdcc473c76c2b05ac3","modified":1483189017000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1483181547000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1483181547000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1483181547000},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1483181547000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1483181547000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1483181547000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1483181547000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1483181547000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1483181547000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1483181547000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1483181547000},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1483181547000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1483181547000},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1483181547000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1483181547000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1483181547000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1483181547000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1483181547000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1483181547000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1483181547000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1483181547000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1483181547000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1483181547000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1483181547000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1483181547000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1483181547000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1483181547000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1483181547000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1483181547000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1483181547000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1483181547000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1483181547000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"ff9f163bb05c0709577040a875924d36c9ab99d6","modified":1483181547000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"dcf9fe43b2ef78b923118ba39efedb38760e76b1","modified":1483181547000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1483181547000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1483181547000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1483181547000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9b63bd8effc7cf4b96acdea4d73add7df934a222","modified":1483181547000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"7e899c4c0aa1312666f2534a4700667d1bfd88da","modified":1483181547000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1483181547000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1483181547000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1483181547000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1483181547000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1483181547000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1483181547000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1483181547000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1483181547000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1483181547000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1483181547000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1483181547000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1483181547000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1483181547000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"9ccee9189c910b8a264802d7b2ec305d12dedcd0","modified":1483181547000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1483181547000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1483181547000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1483181547000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1483181547000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1483181547000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1483181547000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1483181547000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4b7f81e1006e7acee3d1c840ccba155239f830cc","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"7f1aab694caf603809e33cff82beea84cd0128fd","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"c6dab7661a6b8c678b21b7eb273cef7100f970f6","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"eba491ae624b4c843c8be4c94a044085dad4ba0f","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"3eb73cee103b810fa56901577ecb9c9bb1793cff","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"637c6b32c58ecf40041be6e911471cd82671919b","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1483181547000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1483181547000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1483181547000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1483181547000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1483181547000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1483181547000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1483181547000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1483181547000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1483181547000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1483181547000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1483181547000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1483181547000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1483181547000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1483181547000}],"Category":[{"name":"python","_id":"cj1s2ul110004atyfufogluif"},{"name":"java","_id":"cj1s2ul1k0009atyfzzg8ir0e"},{"name":"随笔","_id":"cj1s2ul1r000fatyfehggpjo1"},{"name":"c++","_id":"cj1s2ul1x000katyfoynh2skx"}],"Data":[],"Page":[{"title":"Categories","date":"2016-12-31T09:20:55.000Z","type":"categories","comment":false,"_content":"","source":"categories/index.md","raw":"---\ntitle: Categories\ndate: 2016-12-31 17:20:55\ntype: \"categories\"\ncomment: false\n---\n","updated":"2016-12-31T13:12:18.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj1s2ul0s0001atyfekqboy0y","content":"","excerpt":"","more":""},{"title":"Tags","date":"2016-12-31T09:21:01.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\ndate: 2016-12-31 17:21:01\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-12-31T13:12:28.000Z","path":"tags/index.html","layout":"page","_id":"cj1s2ul0z0003atyfgzbn7yko","content":"","excerpt":"","more":""}],"Post":[{"title":"Python装饰器","abbrlink":43106,"date":"2017-01-01T04:02:55.000Z","_content":"Python装饰器是个不错的东西，应用场景也比较广泛。\n<!-- more -->\n之前写过一个Saltstack的模块，用于查询我们的CMDB。查询操作可能会由于网络抖动等原因失败，如果查询失败，会再次进行尝试，设定它会尝试三次。这个装饰器的一个典型应用场景，而且这个装饰器还带参数。之前没怎么用过待参数的装饰器，虽然技术含量也不高，还是记录一下。\n\n```python\nimport logging\nfrom functools import wraps\nfrom requests.exceptions import RequestException, Timeout, HTTPError\n\nlog = logging.getLogger(__name__)\n\ndef retry(times, *exception_types):\n    def outer(func):\n        @wraps(func)\n        def inner(*args, **kwargs):\n            for n in range(times):\n                try:\n                    return func(*args, **kwargs)\n                except RequestException:\n                    continue\n        return inner\n    return outer\n\n\nclass QueryCMDB:\n    ...\n\n    @retry(3, Timeout, HTTPError)\n    def _get_data(self, page, size, timeout, **q_args):\n        ...\n        url = self.url_concat(...)\n\n        log.info('url: {}'.format(url))\n        with self.session as s:\n            resp = s.get(url, headers=self.xheaders(...), timeout=timeout)\n        return resp.json()\n\n    def query(self, fields=None, timeout=None, page=1, size=50, **kwargs):\n        data = self._get_data(page=page, size=size, timeout=timeout, **kwargs)\n        if data:\n            pass\n\nclient = QueryCMDB(...)\n```\n\n对于我的这个模块而言，捕获的是RequestException，Timout和HTTPError都是它的子类，所以直接在里面写死了，所以不是很通用，但是可以很容易的进行抽象一下，提炼成更通用的装饰器。\n就这样。","source":"_posts/Python装饰器.md","raw":"---\ntitle: Python装饰器\ntags: 装饰器\ncategories: python\nabbrlink: 43106\ndate: 2017-01-01 12:02:55\n---\nPython装饰器是个不错的东西，应用场景也比较广泛。\n<!-- more -->\n之前写过一个Saltstack的模块，用于查询我们的CMDB。查询操作可能会由于网络抖动等原因失败，如果查询失败，会再次进行尝试，设定它会尝试三次。这个装饰器的一个典型应用场景，而且这个装饰器还带参数。之前没怎么用过待参数的装饰器，虽然技术含量也不高，还是记录一下。\n\n```python\nimport logging\nfrom functools import wraps\nfrom requests.exceptions import RequestException, Timeout, HTTPError\n\nlog = logging.getLogger(__name__)\n\ndef retry(times, *exception_types):\n    def outer(func):\n        @wraps(func)\n        def inner(*args, **kwargs):\n            for n in range(times):\n                try:\n                    return func(*args, **kwargs)\n                except RequestException:\n                    continue\n        return inner\n    return outer\n\n\nclass QueryCMDB:\n    ...\n\n    @retry(3, Timeout, HTTPError)\n    def _get_data(self, page, size, timeout, **q_args):\n        ...\n        url = self.url_concat(...)\n\n        log.info('url: {}'.format(url))\n        with self.session as s:\n            resp = s.get(url, headers=self.xheaders(...), timeout=timeout)\n        return resp.json()\n\n    def query(self, fields=None, timeout=None, page=1, size=50, **kwargs):\n        data = self._get_data(page=page, size=size, timeout=timeout, **kwargs)\n        if data:\n            pass\n\nclient = QueryCMDB(...)\n```\n\n对于我的这个模块而言，捕获的是RequestException，Timout和HTTPError都是它的子类，所以直接在里面写死了，所以不是很通用，但是可以很容易的进行抽象一下，提炼成更通用的装饰器。\n就这样。","slug":"Python装饰器","published":1,"updated":"2017-04-21T15:58:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1s2ul0m0000atyfhwcgfw8z","content":"<p>Python装饰器是个不错的东西，应用场景也比较广泛。<br><a id=\"more\"></a><br>之前写过一个Saltstack的模块，用于查询我们的CMDB。查询操作可能会由于网络抖动等原因失败，如果查询失败，会再次进行尝试，设定它会尝试三次。这个装饰器的一个典型应用场景，而且这个装饰器还带参数。之前没怎么用过待参数的装饰器，虽然技术含量也不高，还是记录一下。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> wraps</div><div class=\"line\"><span class=\"keyword\">from</span> requests.exceptions <span class=\"keyword\">import</span> RequestException, Timeout, HTTPError</div><div class=\"line\"></div><div class=\"line\">log = logging.getLogger(__name__)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">retry</span><span class=\"params\">(times, *exception_types)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">outer</span><span class=\"params\">(func)</span>:</span></div><div class=\"line\"><span class=\"meta\">        @wraps(func)</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inner</span><span class=\"params\">(*args, **kwargs)</span>:</span></div><div class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> range(times):</div><div class=\"line\">                <span class=\"keyword\">try</span>:</div><div class=\"line\">                    <span class=\"keyword\">return</span> func(*args, **kwargs)</div><div class=\"line\">                <span class=\"keyword\">except</span> RequestException:</div><div class=\"line\">                    <span class=\"keyword\">continue</span></div><div class=\"line\">        <span class=\"keyword\">return</span> inner</div><div class=\"line\">    <span class=\"keyword\">return</span> outer</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QueryCMDB</span>:</span></div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">    @retry(3, Timeout, HTTPError)</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_get_data</span><span class=\"params\">(self, page, size, timeout, **q_args)</span>:</span></div><div class=\"line\">        ...</div><div class=\"line\">        url = self.url_concat(...)</div><div class=\"line\"></div><div class=\"line\">        log.info(<span class=\"string\">'url: &#123;&#125;'</span>.format(url))</div><div class=\"line\">        <span class=\"keyword\">with</span> self.session <span class=\"keyword\">as</span> s:</div><div class=\"line\">            resp = s.get(url, headers=self.xheaders(...), timeout=timeout)</div><div class=\"line\">        <span class=\"keyword\">return</span> resp.json()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">query</span><span class=\"params\">(self, fields=None, timeout=None, page=<span class=\"number\">1</span>, size=<span class=\"number\">50</span>, **kwargs)</span>:</span></div><div class=\"line\">        data = self._get_data(page=page, size=size, timeout=timeout, **kwargs)</div><div class=\"line\">        <span class=\"keyword\">if</span> data:</div><div class=\"line\">            <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\">client = QueryCMDB(...)</div></pre></td></tr></table></figure>\n<p>对于我的这个模块而言，捕获的是RequestException，Timout和HTTPError都是它的子类，所以直接在里面写死了，所以不是很通用，但是可以很容易的进行抽象一下，提炼成更通用的装饰器。<br>就这样。</p>\n","excerpt":"<p>Python装饰器是个不错的东西，应用场景也比较广泛。<br>","more":"<br>之前写过一个Saltstack的模块，用于查询我们的CMDB。查询操作可能会由于网络抖动等原因失败，如果查询失败，会再次进行尝试，设定它会尝试三次。这个装饰器的一个典型应用场景，而且这个装饰器还带参数。之前没怎么用过待参数的装饰器，虽然技术含量也不高，还是记录一下。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> wraps</div><div class=\"line\"><span class=\"keyword\">from</span> requests.exceptions <span class=\"keyword\">import</span> RequestException, Timeout, HTTPError</div><div class=\"line\"></div><div class=\"line\">log = logging.getLogger(__name__)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">retry</span><span class=\"params\">(times, *exception_types)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">outer</span><span class=\"params\">(func)</span>:</span></div><div class=\"line\"><span class=\"meta\">        @wraps(func)</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inner</span><span class=\"params\">(*args, **kwargs)</span>:</span></div><div class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> range(times):</div><div class=\"line\">                <span class=\"keyword\">try</span>:</div><div class=\"line\">                    <span class=\"keyword\">return</span> func(*args, **kwargs)</div><div class=\"line\">                <span class=\"keyword\">except</span> RequestException:</div><div class=\"line\">                    <span class=\"keyword\">continue</span></div><div class=\"line\">        <span class=\"keyword\">return</span> inner</div><div class=\"line\">    <span class=\"keyword\">return</span> outer</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QueryCMDB</span>:</span></div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">    @retry(3, Timeout, HTTPError)</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_get_data</span><span class=\"params\">(self, page, size, timeout, **q_args)</span>:</span></div><div class=\"line\">        ...</div><div class=\"line\">        url = self.url_concat(...)</div><div class=\"line\"></div><div class=\"line\">        log.info(<span class=\"string\">'url: &#123;&#125;'</span>.format(url))</div><div class=\"line\">        <span class=\"keyword\">with</span> self.session <span class=\"keyword\">as</span> s:</div><div class=\"line\">            resp = s.get(url, headers=self.xheaders(...), timeout=timeout)</div><div class=\"line\">        <span class=\"keyword\">return</span> resp.json()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">query</span><span class=\"params\">(self, fields=None, timeout=None, page=<span class=\"number\">1</span>, size=<span class=\"number\">50</span>, **kwargs)</span>:</span></div><div class=\"line\">        data = self._get_data(page=page, size=size, timeout=timeout, **kwargs)</div><div class=\"line\">        <span class=\"keyword\">if</span> data:</div><div class=\"line\">            <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\">client = QueryCMDB(...)</div></pre></td></tr></table></figure>\n<p>对于我的这个模块而言，捕获的是RequestException，Timout和HTTPError都是它的子类，所以直接在里面写死了，所以不是很通用，但是可以很容易的进行抽象一下，提炼成更通用的装饰器。<br>就这样。</p>"},{"title":"Spring实战之一：概览","abbrlink":129,"date":"2017-04-21T16:09:35.000Z","_content":"第一章：Spring之旅\nSpring是一个开源框架，出现的目的是为了解决企业级应用开发的复杂性。Spring使用了以下4种策略来降低Java开发的复杂性：\n1）基于POJO的轻量级和最小侵入性编程\n2）通过依赖注入和面向接口实现松耦合\n3）基于切面和惯例进行声明式编程\n4）通过切面和模板减少样板式代码\n\n<!-- more -->\n\nPOJO：Plain Old Java Object，普通Java对象。\n它是普通的Java类，有一些private的参数（属性），然后为其中的每个参数定义了getter和setter作为访问的接口。例：\n\n```java\npublic class User {\n    private name;\n\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n```\n\n依赖注入：\n依赖注入（DI）是控制反转（IoC）的一种方式，所谓依赖注入就是把实例变量传入到一个对象中去。例：\n```java\n    public class DamselRescuingKnight implements Knight {\n        private RescueDamselQuest quest;\n        \n        public DamselRescuingKnight() {\n            // 紧耦合，一个对象在运行过程中需要创建另外一个跟它有依赖关系的对象\n            this.quest = new RescueDamselQuest();\n        }\n    \n        public void embarkOnQuest() {\n            quest.embark();\n        }\n    }\n    \n    public class BraveKnight implements Knight {\n        private Quest quest;\n        \n        public BraveKnight(Quest quest) {\n            // 依赖注入，对象不需要创建另外一个对象，只需要关注自身的逻辑\n            this.quest = quest;   \n        }\n        \n        public void embarkOnQuest() {\n            quest.embark();\n        }\n    }\n```\n了解Ioc和DI，可以参考：http://blog.xiaohansong.com/2015/10/21/IoC-and-DI/\n\nSpring模块：\nSpring框架由20多个模块组成，这20多个模块可以分为6大类：\n核心容器：Core、Context、Bean、Expression、Context support\nWeb与远程调用：Web、WebSocket、Web servlet、Web portlet\n数据访问与集成：JDBC、ORM、OXM、Transaction、Messaging、JMS\n面向切面：AOP、Aspects\nInstrumentation：Instrument、Instrument Tomcat\n测试：Test\n\n见下图：![modules](/images/SpringModules.png)\n对于数据访问与集成，相比较JDBC而言，ORM会更流行一些，Spring本身不提供ORM解决方案，而是对许多流行的ORM进行了集成，包括Hibernate、Mybatis等。\n对于Web与远程调用，Spring能够与许多流行的MVC框架集成，但它本身也提供了一个MVC框架：Spring MVC\n\nRestTemplate：\n这是3.2版本以后提供的，这是个好东西。\n","source":"_posts/Spring实战之一：概览.md","raw":"---\ntitle: Spring实战之一：概览\ncategories: java\ntags:\n  - java\n  - spring\n  - 阅读笔记\nabbrlink: 129\ndate: 2017-04-22 00:09:35\n---\n第一章：Spring之旅\nSpring是一个开源框架，出现的目的是为了解决企业级应用开发的复杂性。Spring使用了以下4种策略来降低Java开发的复杂性：\n1）基于POJO的轻量级和最小侵入性编程\n2）通过依赖注入和面向接口实现松耦合\n3）基于切面和惯例进行声明式编程\n4）通过切面和模板减少样板式代码\n\n<!-- more -->\n\nPOJO：Plain Old Java Object，普通Java对象。\n它是普通的Java类，有一些private的参数（属性），然后为其中的每个参数定义了getter和setter作为访问的接口。例：\n\n```java\npublic class User {\n    private name;\n\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n```\n\n依赖注入：\n依赖注入（DI）是控制反转（IoC）的一种方式，所谓依赖注入就是把实例变量传入到一个对象中去。例：\n```java\n    public class DamselRescuingKnight implements Knight {\n        private RescueDamselQuest quest;\n        \n        public DamselRescuingKnight() {\n            // 紧耦合，一个对象在运行过程中需要创建另外一个跟它有依赖关系的对象\n            this.quest = new RescueDamselQuest();\n        }\n    \n        public void embarkOnQuest() {\n            quest.embark();\n        }\n    }\n    \n    public class BraveKnight implements Knight {\n        private Quest quest;\n        \n        public BraveKnight(Quest quest) {\n            // 依赖注入，对象不需要创建另外一个对象，只需要关注自身的逻辑\n            this.quest = quest;   \n        }\n        \n        public void embarkOnQuest() {\n            quest.embark();\n        }\n    }\n```\n了解Ioc和DI，可以参考：http://blog.xiaohansong.com/2015/10/21/IoC-and-DI/\n\nSpring模块：\nSpring框架由20多个模块组成，这20多个模块可以分为6大类：\n核心容器：Core、Context、Bean、Expression、Context support\nWeb与远程调用：Web、WebSocket、Web servlet、Web portlet\n数据访问与集成：JDBC、ORM、OXM、Transaction、Messaging、JMS\n面向切面：AOP、Aspects\nInstrumentation：Instrument、Instrument Tomcat\n测试：Test\n\n见下图：![modules](/images/SpringModules.png)\n对于数据访问与集成，相比较JDBC而言，ORM会更流行一些，Spring本身不提供ORM解决方案，而是对许多流行的ORM进行了集成，包括Hibernate、Mybatis等。\n对于Web与远程调用，Spring能够与许多流行的MVC框架集成，但它本身也提供了一个MVC框架：Spring MVC\n\nRestTemplate：\n这是3.2版本以后提供的，这是个好东西。\n","slug":"Spring实战之一：概览","published":1,"updated":"2017-04-21T16:55:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1s2ul0u0002atyfjpz96kzd","content":"<p>第一章：Spring之旅<br>Spring是一个开源框架，出现的目的是为了解决企业级应用开发的复杂性。Spring使用了以下4种策略来降低Java开发的复杂性：<br>1）基于POJO的轻量级和最小侵入性编程<br>2）通过依赖注入和面向接口实现松耦合<br>3）基于切面和惯例进行声明式编程<br>4）通过切面和模板减少样板式代码</p>\n<a id=\"more\"></a>\n<p>POJO：Plain Old Java Object，普通Java对象。<br>它是普通的Java类，有一些private的参数（属性），然后为其中的每个参数定义了getter和setter作为访问的接口。例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> name;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> name;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>依赖注入：<br>依赖注入（DI）是控制反转（IoC）的一种方式，所谓依赖注入就是把实例变量传入到一个对象中去。例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DamselRescuingKnight</span> <span class=\"keyword\">implements</span> <span class=\"title\">Knight</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> RescueDamselQuest quest;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DamselRescuingKnight</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 紧耦合，一个对象在运行过程中需要创建另外一个跟它有依赖关系的对象</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.quest = <span class=\"keyword\">new</span> RescueDamselQuest();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">embarkOnQuest</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        quest.embark();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BraveKnight</span> <span class=\"keyword\">implements</span> <span class=\"title\">Knight</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Quest quest;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BraveKnight</span><span class=\"params\">(Quest quest)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 依赖注入，对象不需要创建另外一个对象，只需要关注自身的逻辑</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.quest = quest;   </div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">embarkOnQuest</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        quest.embark();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>了解Ioc和DI，可以参考：<a href=\"http://blog.xiaohansong.com/2015/10/21/IoC-and-DI/\" target=\"_blank\" rel=\"external\">http://blog.xiaohansong.com/2015/10/21/IoC-and-DI/</a></p>\n<p>Spring模块：<br>Spring框架由20多个模块组成，这20多个模块可以分为6大类：<br>核心容器：Core、Context、Bean、Expression、Context support<br>Web与远程调用：Web、WebSocket、Web servlet、Web portlet<br>数据访问与集成：JDBC、ORM、OXM、Transaction、Messaging、JMS<br>面向切面：AOP、Aspects<br>Instrumentation：Instrument、Instrument Tomcat<br>测试：Test</p>\n<p>见下图：<img src=\"/images/SpringModules.png\" alt=\"modules\"><br>对于数据访问与集成，相比较JDBC而言，ORM会更流行一些，Spring本身不提供ORM解决方案，而是对许多流行的ORM进行了集成，包括Hibernate、Mybatis等。<br>对于Web与远程调用，Spring能够与许多流行的MVC框架集成，但它本身也提供了一个MVC框架：Spring MVC</p>\n<p>RestTemplate：<br>这是3.2版本以后提供的，这是个好东西。</p>\n","excerpt":"<p>第一章：Spring之旅<br>Spring是一个开源框架，出现的目的是为了解决企业级应用开发的复杂性。Spring使用了以下4种策略来降低Java开发的复杂性：<br>1）基于POJO的轻量级和最小侵入性编程<br>2）通过依赖注入和面向接口实现松耦合<br>3）基于切面和惯例进行声明式编程<br>4）通过切面和模板减少样板式代码</p>","more":"<p>POJO：Plain Old Java Object，普通Java对象。<br>它是普通的Java类，有一些private的参数（属性），然后为其中的每个参数定义了getter和setter作为访问的接口。例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> name;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> name;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>依赖注入：<br>依赖注入（DI）是控制反转（IoC）的一种方式，所谓依赖注入就是把实例变量传入到一个对象中去。例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DamselRescuingKnight</span> <span class=\"keyword\">implements</span> <span class=\"title\">Knight</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> RescueDamselQuest quest;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DamselRescuingKnight</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 紧耦合，一个对象在运行过程中需要创建另外一个跟它有依赖关系的对象</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.quest = <span class=\"keyword\">new</span> RescueDamselQuest();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">embarkOnQuest</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        quest.embark();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BraveKnight</span> <span class=\"keyword\">implements</span> <span class=\"title\">Knight</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Quest quest;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BraveKnight</span><span class=\"params\">(Quest quest)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 依赖注入，对象不需要创建另外一个对象，只需要关注自身的逻辑</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.quest = quest;   </div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">embarkOnQuest</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        quest.embark();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>了解Ioc和DI，可以参考：<a href=\"http://blog.xiaohansong.com/2015/10/21/IoC-and-DI/\">http://blog.xiaohansong.com/2015/10/21/IoC-and-DI/</a></p>\n<p>Spring模块：<br>Spring框架由20多个模块组成，这20多个模块可以分为6大类：<br>核心容器：Core、Context、Bean、Expression、Context support<br>Web与远程调用：Web、WebSocket、Web servlet、Web portlet<br>数据访问与集成：JDBC、ORM、OXM、Transaction、Messaging、JMS<br>面向切面：AOP、Aspects<br>Instrumentation：Instrument、Instrument Tomcat<br>测试：Test</p>\n<p>见下图：<img src=\"/images/SpringModules.png\" alt=\"modules\"><br>对于数据访问与集成，相比较JDBC而言，ORM会更流行一些，Spring本身不提供ORM解决方案，而是对许多流行的ORM进行了集成，包括Hibernate、Mybatis等。<br>对于Web与远程调用，Spring能够与许多流行的MVC框架集成，但它本身也提供了一个MVC框架：Spring MVC</p>\n<p>RestTemplate：<br>这是3.2版本以后提供的，这是个好东西。</p>"},{"title":"Hello 2017","abbrlink":32364,"date":"2016-12-31T11:49:19.000Z","_content":"\nBlog重新开张。之前丢失了源码，很多文章找不到了，所以这个博客很久没动过了，这次趁着元旦假期重新整一下，主题也换成了Next。\n\n这一年就要过，这里也记个流水账，回眸过去看看都做了些什么。\n\n<!-- more -->\n\n2016年换了一份工作，从写Python转向了写Java。开年时有个愿望，想写一个拿得出手能够开源的产品，现在总结下来，并没有写出什么东西。惭愧。\n2016年把房子装修了下，搬进去了，算是一件大事完成了。\n2016年报考了交大的升本，录取了，一个小成就完成了。\n2016年在考驾照，整一年了，还在练大路。虽然有客观上时间比较少，去练车的次数不多的原因，但主要还是练得水平不够好，惭愧。\n\n时光从来抓不住，好的坏的，过去的都抛去，轻松再出发。Go，2017！\n","source":"_posts/Hello-2017.md","raw":"---\ntitle: Hello 2017\ntags: 随笔\ncategories: 随笔\nabbrlink: 32364\ndate: 2016-12-31 19:49:19\n---\n\nBlog重新开张。之前丢失了源码，很多文章找不到了，所以这个博客很久没动过了，这次趁着元旦假期重新整一下，主题也换成了Next。\n\n这一年就要过，这里也记个流水账，回眸过去看看都做了些什么。\n\n<!-- more -->\n\n2016年换了一份工作，从写Python转向了写Java。开年时有个愿望，想写一个拿得出手能够开源的产品，现在总结下来，并没有写出什么东西。惭愧。\n2016年把房子装修了下，搬进去了，算是一件大事完成了。\n2016年报考了交大的升本，录取了，一个小成就完成了。\n2016年在考驾照，整一年了，还在练大路。虽然有客观上时间比较少，去练车的次数不多的原因，但主要还是练得水平不够好，惭愧。\n\n时光从来抓不住，好的坏的，过去的都抛去，轻松再出发。Go，2017！\n","slug":"Hello-2017","published":1,"updated":"2017-04-21T15:58:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1s2ul180006atyfu105zymh","content":"<p>Blog重新开张。之前丢失了源码，很多文章找不到了，所以这个博客很久没动过了，这次趁着元旦假期重新整一下，主题也换成了Next。</p>\n<p>这一年就要过，这里也记个流水账，回眸过去看看都做了些什么。</p>\n<a id=\"more\"></a>\n<p>2016年换了一份工作，从写Python转向了写Java。开年时有个愿望，想写一个拿得出手能够开源的产品，现在总结下来，并没有写出什么东西。惭愧。<br>2016年把房子装修了下，搬进去了，算是一件大事完成了。<br>2016年报考了交大的升本，录取了，一个小成就完成了。<br>2016年在考驾照，整一年了，还在练大路。虽然有客观上时间比较少，去练车的次数不多的原因，但主要还是练得水平不够好，惭愧。</p>\n<p>时光从来抓不住，好的坏的，过去的都抛去，轻松再出发。Go，2017！</p>\n","excerpt":"<p>Blog重新开张。之前丢失了源码，很多文章找不到了，所以这个博客很久没动过了，这次趁着元旦假期重新整一下，主题也换成了Next。</p>\n<p>这一年就要过，这里也记个流水账，回眸过去看看都做了些什么。</p>","more":"<p>2016年换了一份工作，从写Python转向了写Java。开年时有个愿望，想写一个拿得出手能够开源的产品，现在总结下来，并没有写出什么东西。惭愧。<br>2016年把房子装修了下，搬进去了，算是一件大事完成了。<br>2016年报考了交大的升本，录取了，一个小成就完成了。<br>2016年在考驾照，整一年了，还在练大路。虽然有客观上时间比较少，去练车的次数不多的原因，但主要还是练得水平不够好，惭愧。</p>\n<p>时光从来抓不住，好的坏的，过去的都抛去，轻松再出发。Go，2017！</p>"},{"title":"Mac下Eclipse编译C++失败","abbrlink":49803,"date":"2017-03-04T14:27:47.000Z","_content":"\n在Eclipse中编译C++时失败，无法通过，报错：ld: symbol(s) not found for architecture x86_64。\n\n<!-- more -->\n\n运行环境：\nOS：macOS Sierra\nEclipse：Eclipse IDE for C/C++ Neon.2\nGCC：\n```text\n> g++ -v\nConfigured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/usr/include/c++/4.2.1\nApple LLVM version 8.0.0 (clang-800.0.42.1)\n```\n\n被这个问题困扰了两三天，最后还是Stackoverflow上的方案尝试成功。链接：http://stackoverflow.com/questions/19637164/c-linking-error-after-upgrading-to-mac-os-x-10-9-xcode-5-0-1\n\n在macOS X中，C++标准库有两种实现：libstdc++和libc++，而自从10.9开始，系统默认使用libc++作为标准库的实现。如果使用libstdc++作为编译选项，会收到一个警告：libstdc++ is deprecated; move to libc++。但是libc++会导致很多编译错误，如果以相关关键字搜索，Goole上有大量的案例。\n\n知道了原因，解决起来也很简单：打开项目的Properties（快捷键：command+i），在C/C++ Build下的Settings —>Tool Settings —>MacOS X C++ Linker，在编译选项中增加 -libstd=libstdc++。\n\n错误截图：\n![error](/images/error.png)\n\n\n\n添加libstdc++：\n![solution](/images/solution.png)","source":"_posts/Mac下Eclipse编译C-失败.md","raw":"---\ntitle: Mac下Eclipse编译C++失败\ntags:\n  - c++\ncategories: c++\nabbrlink: 49803\ndate: 2017-03-04 22:27:47\n---\n\n在Eclipse中编译C++时失败，无法通过，报错：ld: symbol(s) not found for architecture x86_64。\n\n<!-- more -->\n\n运行环境：\nOS：macOS Sierra\nEclipse：Eclipse IDE for C/C++ Neon.2\nGCC：\n```text\n> g++ -v\nConfigured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/usr/include/c++/4.2.1\nApple LLVM version 8.0.0 (clang-800.0.42.1)\n```\n\n被这个问题困扰了两三天，最后还是Stackoverflow上的方案尝试成功。链接：http://stackoverflow.com/questions/19637164/c-linking-error-after-upgrading-to-mac-os-x-10-9-xcode-5-0-1\n\n在macOS X中，C++标准库有两种实现：libstdc++和libc++，而自从10.9开始，系统默认使用libc++作为标准库的实现。如果使用libstdc++作为编译选项，会收到一个警告：libstdc++ is deprecated; move to libc++。但是libc++会导致很多编译错误，如果以相关关键字搜索，Goole上有大量的案例。\n\n知道了原因，解决起来也很简单：打开项目的Properties（快捷键：command+i），在C/C++ Build下的Settings —>Tool Settings —>MacOS X C++ Linker，在编译选项中增加 -libstd=libstdc++。\n\n错误截图：\n![error](/images/error.png)\n\n\n\n添加libstdc++：\n![solution](/images/solution.png)","slug":"Mac下Eclipse编译C-失败","published":1,"updated":"2017-04-21T15:58:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1s2ul1d0007atyfq4gwmuz0","content":"<p>在Eclipse中编译C++时失败，无法通过，报错：ld: symbol(s) not found for architecture x86_64。</p>\n<a id=\"more\"></a>\n<p>运行环境：<br>OS：macOS Sierra<br>Eclipse：Eclipse IDE for C/C++ Neon.2<br>GCC：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; g++ -v</div><div class=\"line\">Configured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/usr/include/c++/4.2.1</div><div class=\"line\">Apple LLVM version 8.0.0 (clang-800.0.42.1)</div></pre></td></tr></table></figure></p>\n<p>被这个问题困扰了两三天，最后还是Stackoverflow上的方案尝试成功。链接：<a href=\"http://stackoverflow.com/questions/19637164/c-linking-error-after-upgrading-to-mac-os-x-10-9-xcode-5-0-1\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/19637164/c-linking-error-after-upgrading-to-mac-os-x-10-9-xcode-5-0-1</a></p>\n<p>在macOS X中，C++标准库有两种实现：libstdc++和libc++，而自从10.9开始，系统默认使用libc++作为标准库的实现。如果使用libstdc++作为编译选项，会收到一个警告：libstdc++ is deprecated; move to libc++。但是libc++会导致很多编译错误，如果以相关关键字搜索，Goole上有大量的案例。</p>\n<p>知道了原因，解决起来也很简单：打开项目的Properties（快捷键：command+i），在C/C++ Build下的Settings —&gt;Tool Settings —&gt;MacOS X C++ Linker，在编译选项中增加 -libstd=libstdc++。</p>\n<p>错误截图：<br><img src=\"/images/error.png\" alt=\"error\"></p>\n<p>添加libstdc++：<br><img src=\"/images/solution.png\" alt=\"solution\"></p>\n","excerpt":"<p>在Eclipse中编译C++时失败，无法通过，报错：ld: symbol(s) not found for architecture x86_64。</p>","more":"<p>运行环境：<br>OS：macOS Sierra<br>Eclipse：Eclipse IDE for C/C++ Neon.2<br>GCC：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; g++ -v</div><div class=\"line\">Configured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/usr/include/c++/4.2.1</div><div class=\"line\">Apple LLVM version 8.0.0 (clang-800.0.42.1)</div></pre></td></tr></table></figure></p>\n<p>被这个问题困扰了两三天，最后还是Stackoverflow上的方案尝试成功。链接：<a href=\"http://stackoverflow.com/questions/19637164/c-linking-error-after-upgrading-to-mac-os-x-10-9-xcode-5-0-1\">http://stackoverflow.com/questions/19637164/c-linking-error-after-upgrading-to-mac-os-x-10-9-xcode-5-0-1</a></p>\n<p>在macOS X中，C++标准库有两种实现：libstdc++和libc++，而自从10.9开始，系统默认使用libc++作为标准库的实现。如果使用libstdc++作为编译选项，会收到一个警告：libstdc++ is deprecated; move to libc++。但是libc++会导致很多编译错误，如果以相关关键字搜索，Goole上有大量的案例。</p>\n<p>知道了原因，解决起来也很简单：打开项目的Properties（快捷键：command+i），在C/C++ Build下的Settings —&gt;Tool Settings —&gt;MacOS X C++ Linker，在编译选项中增加 -libstd=libstdc++。</p>\n<p>错误截图：<br><img src=\"/images/error.png\" alt=\"error\"></p>\n<p>添加libstdc++：<br><img src=\"/images/solution.png\" alt=\"solution\"></p>"},{"title":"Python文件处理","abbrlink":8190,"date":"2017-01-01T04:21:42.000Z","_content":"python中处理大量文件时，生成器是个不错的选择。\n<!-- more -->\n\n最近一段时间（非博客上显示的成文时间。这是之前写的，也是保留下来的少数几篇博文之一）忙于充实我们的CMDB，上周采集了我们的交换机数据，预处理后生成了113个文件，总大小275KB，平均每个文件大约2.5KB。这些文件需要进一步的处理。文件内容的格式大致如此：\n```text\n            GE0/0/14 abc1-a123-1234 51023423541234003472\n            GE1/0/28 abc1-a123-5678 51023423541234000569\nEth-Trunk48 GigabitEthernet0/0/48 abc1-a123-5566 51023423541234003472\nEth-Trunk48 GigabitEthernet1/0/48 abc1-a123-5566 51023423541234000569\n```\n第一列为聚合口，第二列为物理口，第三列为接在该口上的服务器MAC地址，第四列为交换机SN号。若交换机没有做堆叠，聚合口为空。我们需要对交换机上采集到的MAC地址的格式进行进一步的处理，格式化成常见的ab:c1:a1:23:12:34格式。\n即使一次性全部读入，100多个小文件处理起来也毫无压力，不过考虑到通用性，我在工具里使用生成器技术来解析这些文件，即使再多的文件也可以顺畅的处理，内存上不会有压力：\n```python\n# -*- coding:utf-8 -*-\n\nimport os\nimport os.path\nimport fnmatch\n\n__author__ = \"lqs\"\n\ndef _parse(lines):\n    for line in lines:\n        *_, port, mac, sn = line.split()\n        yield ':'.join(['{}:{}'.format(m[:2], m[2:]) for m in mac.split('-')])\n\ndef _gen_fp(files):\n    for fp in files:\n        f = open(fp)\n        yield f\n        f.close()\n\ndef _gen_file(dir_path, wildcard='*.txt'):\n    for file in fnmatch.filter(os.listdir(dir_path), wildcard):\n        yield os.path.join(dir_path, file)\n\n# `yield from <iterator>` 语句遍历迭代器对象, 并返回其每一个值. 具体到这里, 实际上它是在读取文件, 并返回每一行. 功效跟 `for` 循环一样, 但更简洁:\n#     for f in iterators:\n#         for line in f:\n#             yield line\n#\ndef _gen_lines(iterators):\n    for it in iterators:\n        yield from it\n\ndef main(dir_path):\n    if not os.path.exists(dir_path):\n        raise IOError('Empty directory!')\n    \n    f = _gen_file(dir_path)\n    fp = _gen_fp(f)\n    lines = _gen_lines(fp)\n    for line in _parse(lines):\n        print(line)\n\nif __name__ == '__main__':\n    dp = os.path.expanduser('~/Desktop/data')\n    main(dp)\n```\n在解析多文件，大文件时，使用生成器以管道方式来处理是常用的手段，可以参考： A Curious Course on Coroutines and Concurrency 。\n\n完成工作后，浏览文档时看到了多进程，想到也可以使用多进程技术来充分利用多核，以加快任务的运行：\n```python\n# -*- coding:utf-8 -*-\n\nimport os\nimport os.path\nimport fnmatch\nfrom concurrent.futures import ProcessPoolExecutor\n\n__author__ = \"lqs\"\n\ndef _parse(fp):\n    mac_addrs = set()\n\n    with open(fp) as f:\n        for line in f:\n            *_, port, mac, sn = line.split()\n            mac_addrs.add(':'.join(['{}:{}'.format(m[:2], m[2:]) for m in mac.split('-')]))\n    \n    return mac_addrs\n\ndef _parse_files(dir_path, wildcard='*.txt'):\n    files = [os.path.join(dir_path, f) for f in fnmatch.filter(os.listdir(dir_path), wildcard)]\n    ret = set()\n    \n    # 使用ProcessPoolExecutor进行多进程任务, 默认的进程数为CPU个数.\n    # `map()`是Python中很有用的小玩意, 借助正确的库可以实现并行化等强大的功能.\n    with ProcessPoolExecutor() as p:\n        for mac in p.map(_parse, files):\n            ret.update(mac)\n    \n    return ret\n\ndef main(dir_path):\n    if not os.path.exists(dir_path):\n        raise IOError('Empty directory!')\n    \n    for mac in _parse_files(dir_path):\n        print(mac)\n\nif __name__ == '__main__':\n    dp = os.path.expanduser('~/Desktop/data')\n    main(dp)\n```\n代码看起来简洁不少！至于哪一种方式更快，内存占用更少，不好判断，所有文件总大小也不到300KB，看不出什么效果。\n\n题外话：concurrent.futures库提供一个高级接口用于异步执行调用，借助该库，我们可以轻松地实现简单的并行编程。\n模块中的两个子类ThreadPoolExecutor和ProcessPoolExecutor分别使用多线程或多进程来异步执行函数，对于简单的并行任务而言，使用concurrent.futures比使用multiprocessing更加方便。","source":"_posts/Python文件处理.md","raw":"---\ntitle: Python文件处理\ntags:\n  - 生成器\n  - 多进程\ncategories: python\nabbrlink: 8190\ndate: 2017-01-01 12:21:42\n---\npython中处理大量文件时，生成器是个不错的选择。\n<!-- more -->\n\n最近一段时间（非博客上显示的成文时间。这是之前写的，也是保留下来的少数几篇博文之一）忙于充实我们的CMDB，上周采集了我们的交换机数据，预处理后生成了113个文件，总大小275KB，平均每个文件大约2.5KB。这些文件需要进一步的处理。文件内容的格式大致如此：\n```text\n            GE0/0/14 abc1-a123-1234 51023423541234003472\n            GE1/0/28 abc1-a123-5678 51023423541234000569\nEth-Trunk48 GigabitEthernet0/0/48 abc1-a123-5566 51023423541234003472\nEth-Trunk48 GigabitEthernet1/0/48 abc1-a123-5566 51023423541234000569\n```\n第一列为聚合口，第二列为物理口，第三列为接在该口上的服务器MAC地址，第四列为交换机SN号。若交换机没有做堆叠，聚合口为空。我们需要对交换机上采集到的MAC地址的格式进行进一步的处理，格式化成常见的ab:c1:a1:23:12:34格式。\n即使一次性全部读入，100多个小文件处理起来也毫无压力，不过考虑到通用性，我在工具里使用生成器技术来解析这些文件，即使再多的文件也可以顺畅的处理，内存上不会有压力：\n```python\n# -*- coding:utf-8 -*-\n\nimport os\nimport os.path\nimport fnmatch\n\n__author__ = \"lqs\"\n\ndef _parse(lines):\n    for line in lines:\n        *_, port, mac, sn = line.split()\n        yield ':'.join(['{}:{}'.format(m[:2], m[2:]) for m in mac.split('-')])\n\ndef _gen_fp(files):\n    for fp in files:\n        f = open(fp)\n        yield f\n        f.close()\n\ndef _gen_file(dir_path, wildcard='*.txt'):\n    for file in fnmatch.filter(os.listdir(dir_path), wildcard):\n        yield os.path.join(dir_path, file)\n\n# `yield from <iterator>` 语句遍历迭代器对象, 并返回其每一个值. 具体到这里, 实际上它是在读取文件, 并返回每一行. 功效跟 `for` 循环一样, 但更简洁:\n#     for f in iterators:\n#         for line in f:\n#             yield line\n#\ndef _gen_lines(iterators):\n    for it in iterators:\n        yield from it\n\ndef main(dir_path):\n    if not os.path.exists(dir_path):\n        raise IOError('Empty directory!')\n    \n    f = _gen_file(dir_path)\n    fp = _gen_fp(f)\n    lines = _gen_lines(fp)\n    for line in _parse(lines):\n        print(line)\n\nif __name__ == '__main__':\n    dp = os.path.expanduser('~/Desktop/data')\n    main(dp)\n```\n在解析多文件，大文件时，使用生成器以管道方式来处理是常用的手段，可以参考： A Curious Course on Coroutines and Concurrency 。\n\n完成工作后，浏览文档时看到了多进程，想到也可以使用多进程技术来充分利用多核，以加快任务的运行：\n```python\n# -*- coding:utf-8 -*-\n\nimport os\nimport os.path\nimport fnmatch\nfrom concurrent.futures import ProcessPoolExecutor\n\n__author__ = \"lqs\"\n\ndef _parse(fp):\n    mac_addrs = set()\n\n    with open(fp) as f:\n        for line in f:\n            *_, port, mac, sn = line.split()\n            mac_addrs.add(':'.join(['{}:{}'.format(m[:2], m[2:]) for m in mac.split('-')]))\n    \n    return mac_addrs\n\ndef _parse_files(dir_path, wildcard='*.txt'):\n    files = [os.path.join(dir_path, f) for f in fnmatch.filter(os.listdir(dir_path), wildcard)]\n    ret = set()\n    \n    # 使用ProcessPoolExecutor进行多进程任务, 默认的进程数为CPU个数.\n    # `map()`是Python中很有用的小玩意, 借助正确的库可以实现并行化等强大的功能.\n    with ProcessPoolExecutor() as p:\n        for mac in p.map(_parse, files):\n            ret.update(mac)\n    \n    return ret\n\ndef main(dir_path):\n    if not os.path.exists(dir_path):\n        raise IOError('Empty directory!')\n    \n    for mac in _parse_files(dir_path):\n        print(mac)\n\nif __name__ == '__main__':\n    dp = os.path.expanduser('~/Desktop/data')\n    main(dp)\n```\n代码看起来简洁不少！至于哪一种方式更快，内存占用更少，不好判断，所有文件总大小也不到300KB，看不出什么效果。\n\n题外话：concurrent.futures库提供一个高级接口用于异步执行调用，借助该库，我们可以轻松地实现简单的并行编程。\n模块中的两个子类ThreadPoolExecutor和ProcessPoolExecutor分别使用多线程或多进程来异步执行函数，对于简单的并行任务而言，使用concurrent.futures比使用multiprocessing更加方便。","slug":"Python文件处理","published":1,"updated":"2017-04-21T15:58:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1s2ul1f0008atyfifonml7m","content":"<p>python中处理大量文件时，生成器是个不错的选择。<br><a id=\"more\"></a></p>\n<p>最近一段时间（非博客上显示的成文时间。这是之前写的，也是保留下来的少数几篇博文之一）忙于充实我们的CMDB，上周采集了我们的交换机数据，预处理后生成了113个文件，总大小275KB，平均每个文件大约2.5KB。这些文件需要进一步的处理。文件内容的格式大致如此：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">            GE0/0/14 abc1-a123-1234 51023423541234003472</div><div class=\"line\">            GE1/0/28 abc1-a123-5678 51023423541234000569</div><div class=\"line\">Eth-Trunk48 GigabitEthernet0/0/48 abc1-a123-5566 51023423541234003472</div><div class=\"line\">Eth-Trunk48 GigabitEthernet1/0/48 abc1-a123-5566 51023423541234000569</div></pre></td></tr></table></figure></p>\n<p>第一列为聚合口，第二列为物理口，第三列为接在该口上的服务器MAC地址，第四列为交换机SN号。若交换机没有做堆叠，聚合口为空。我们需要对交换机上采集到的MAC地址的格式进行进一步的处理，格式化成常见的ab:c1:a1:23:12:34格式。<br>即使一次性全部读入，100多个小文件处理起来也毫无压力，不过考虑到通用性，我在工具里使用生成器技术来解析这些文件，即使再多的文件也可以顺畅的处理，内存上不会有压力：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"keyword\">import</span> os.path</div><div class=\"line\"><span class=\"keyword\">import</span> fnmatch</div><div class=\"line\"></div><div class=\"line\">__author__ = <span class=\"string\">\"lqs\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_parse</span><span class=\"params\">(lines)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> lines:</div><div class=\"line\">        *_, port, mac, sn = line.split()</div><div class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"string\">':'</span>.join([<span class=\"string\">'&#123;&#125;:&#123;&#125;'</span>.format(m[:<span class=\"number\">2</span>], m[<span class=\"number\">2</span>:]) <span class=\"keyword\">for</span> m <span class=\"keyword\">in</span> mac.split(<span class=\"string\">'-'</span>)])</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_gen_fp</span><span class=\"params\">(files)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> fp <span class=\"keyword\">in</span> files:</div><div class=\"line\">        f = open(fp)</div><div class=\"line\">        <span class=\"keyword\">yield</span> f</div><div class=\"line\">        f.close()</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_gen_file</span><span class=\"params\">(dir_path, wildcard=<span class=\"string\">'*.txt'</span>)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> fnmatch.filter(os.listdir(dir_path), wildcard):</div><div class=\"line\">        <span class=\"keyword\">yield</span> os.path.join(dir_path, file)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># `yield from &lt;iterator&gt;` 语句遍历迭代器对象, 并返回其每一个值. 具体到这里, 实际上它是在读取文件, 并返回每一行. 功效跟 `for` 循环一样, 但更简洁:</span></div><div class=\"line\"><span class=\"comment\">#     for f in iterators:</span></div><div class=\"line\"><span class=\"comment\">#         for line in f:</span></div><div class=\"line\"><span class=\"comment\">#             yield line</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_gen_lines</span><span class=\"params\">(iterators)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> it <span class=\"keyword\">in</span> iterators:</div><div class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"keyword\">from</span> it</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">(dir_path)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(dir_path):</div><div class=\"line\">        <span class=\"keyword\">raise</span> IOError(<span class=\"string\">'Empty directory!'</span>)</div><div class=\"line\">    </div><div class=\"line\">    f = _gen_file(dir_path)</div><div class=\"line\">    fp = _gen_fp(f)</div><div class=\"line\">    lines = _gen_lines(fp)</div><div class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> _parse(lines):</div><div class=\"line\">        print(line)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    dp = os.path.expanduser(<span class=\"string\">'~/Desktop/data'</span>)</div><div class=\"line\">    main(dp)</div></pre></td></tr></table></figure></p>\n<p>在解析多文件，大文件时，使用生成器以管道方式来处理是常用的手段，可以参考： A Curious Course on Coroutines and Concurrency 。</p>\n<p>完成工作后，浏览文档时看到了多进程，想到也可以使用多进程技术来充分利用多核，以加快任务的运行：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"keyword\">import</span> os.path</div><div class=\"line\"><span class=\"keyword\">import</span> fnmatch</div><div class=\"line\"><span class=\"keyword\">from</span> concurrent.futures <span class=\"keyword\">import</span> ProcessPoolExecutor</div><div class=\"line\"></div><div class=\"line\">__author__ = <span class=\"string\">\"lqs\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_parse</span><span class=\"params\">(fp)</span>:</span></div><div class=\"line\">    mac_addrs = set()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">with</span> open(fp) <span class=\"keyword\">as</span> f:</div><div class=\"line\">        <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f:</div><div class=\"line\">            *_, port, mac, sn = line.split()</div><div class=\"line\">            mac_addrs.add(<span class=\"string\">':'</span>.join([<span class=\"string\">'&#123;&#125;:&#123;&#125;'</span>.format(m[:<span class=\"number\">2</span>], m[<span class=\"number\">2</span>:]) <span class=\"keyword\">for</span> m <span class=\"keyword\">in</span> mac.split(<span class=\"string\">'-'</span>)]))</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> mac_addrs</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_parse_files</span><span class=\"params\">(dir_path, wildcard=<span class=\"string\">'*.txt'</span>)</span>:</span></div><div class=\"line\">    files = [os.path.join(dir_path, f) <span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> fnmatch.filter(os.listdir(dir_path), wildcard)]</div><div class=\"line\">    ret = set()</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\"># 使用ProcessPoolExecutor进行多进程任务, 默认的进程数为CPU个数.</span></div><div class=\"line\">    <span class=\"comment\"># `map()`是Python中很有用的小玩意, 借助正确的库可以实现并行化等强大的功能.</span></div><div class=\"line\">    <span class=\"keyword\">with</span> ProcessPoolExecutor() <span class=\"keyword\">as</span> p:</div><div class=\"line\">        <span class=\"keyword\">for</span> mac <span class=\"keyword\">in</span> p.map(_parse, files):</div><div class=\"line\">            ret.update(mac)</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> ret</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">(dir_path)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(dir_path):</div><div class=\"line\">        <span class=\"keyword\">raise</span> IOError(<span class=\"string\">'Empty directory!'</span>)</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span> mac <span class=\"keyword\">in</span> _parse_files(dir_path):</div><div class=\"line\">        print(mac)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    dp = os.path.expanduser(<span class=\"string\">'~/Desktop/data'</span>)</div><div class=\"line\">    main(dp)</div></pre></td></tr></table></figure></p>\n<p>代码看起来简洁不少！至于哪一种方式更快，内存占用更少，不好判断，所有文件总大小也不到300KB，看不出什么效果。</p>\n<p>题外话：concurrent.futures库提供一个高级接口用于异步执行调用，借助该库，我们可以轻松地实现简单的并行编程。<br>模块中的两个子类ThreadPoolExecutor和ProcessPoolExecutor分别使用多线程或多进程来异步执行函数，对于简单的并行任务而言，使用concurrent.futures比使用multiprocessing更加方便。</p>\n","excerpt":"<p>python中处理大量文件时，生成器是个不错的选择。<br>","more":"</p>\n<p>最近一段时间（非博客上显示的成文时间。这是之前写的，也是保留下来的少数几篇博文之一）忙于充实我们的CMDB，上周采集了我们的交换机数据，预处理后生成了113个文件，总大小275KB，平均每个文件大约2.5KB。这些文件需要进一步的处理。文件内容的格式大致如此：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">            GE0/0/14 abc1-a123-1234 51023423541234003472</div><div class=\"line\">            GE1/0/28 abc1-a123-5678 51023423541234000569</div><div class=\"line\">Eth-Trunk48 GigabitEthernet0/0/48 abc1-a123-5566 51023423541234003472</div><div class=\"line\">Eth-Trunk48 GigabitEthernet1/0/48 abc1-a123-5566 51023423541234000569</div></pre></td></tr></table></figure></p>\n<p>第一列为聚合口，第二列为物理口，第三列为接在该口上的服务器MAC地址，第四列为交换机SN号。若交换机没有做堆叠，聚合口为空。我们需要对交换机上采集到的MAC地址的格式进行进一步的处理，格式化成常见的ab:c1:a1:23:12:34格式。<br>即使一次性全部读入，100多个小文件处理起来也毫无压力，不过考虑到通用性，我在工具里使用生成器技术来解析这些文件，即使再多的文件也可以顺畅的处理，内存上不会有压力：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"keyword\">import</span> os.path</div><div class=\"line\"><span class=\"keyword\">import</span> fnmatch</div><div class=\"line\"></div><div class=\"line\">__author__ = <span class=\"string\">\"lqs\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_parse</span><span class=\"params\">(lines)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> lines:</div><div class=\"line\">        *_, port, mac, sn = line.split()</div><div class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"string\">':'</span>.join([<span class=\"string\">'&#123;&#125;:&#123;&#125;'</span>.format(m[:<span class=\"number\">2</span>], m[<span class=\"number\">2</span>:]) <span class=\"keyword\">for</span> m <span class=\"keyword\">in</span> mac.split(<span class=\"string\">'-'</span>)])</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_gen_fp</span><span class=\"params\">(files)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> fp <span class=\"keyword\">in</span> files:</div><div class=\"line\">        f = open(fp)</div><div class=\"line\">        <span class=\"keyword\">yield</span> f</div><div class=\"line\">        f.close()</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_gen_file</span><span class=\"params\">(dir_path, wildcard=<span class=\"string\">'*.txt'</span>)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> fnmatch.filter(os.listdir(dir_path), wildcard):</div><div class=\"line\">        <span class=\"keyword\">yield</span> os.path.join(dir_path, file)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># `yield from &lt;iterator&gt;` 语句遍历迭代器对象, 并返回其每一个值. 具体到这里, 实际上它是在读取文件, 并返回每一行. 功效跟 `for` 循环一样, 但更简洁:</span></div><div class=\"line\"><span class=\"comment\">#     for f in iterators:</span></div><div class=\"line\"><span class=\"comment\">#         for line in f:</span></div><div class=\"line\"><span class=\"comment\">#             yield line</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_gen_lines</span><span class=\"params\">(iterators)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> it <span class=\"keyword\">in</span> iterators:</div><div class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"keyword\">from</span> it</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">(dir_path)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(dir_path):</div><div class=\"line\">        <span class=\"keyword\">raise</span> IOError(<span class=\"string\">'Empty directory!'</span>)</div><div class=\"line\">    </div><div class=\"line\">    f = _gen_file(dir_path)</div><div class=\"line\">    fp = _gen_fp(f)</div><div class=\"line\">    lines = _gen_lines(fp)</div><div class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> _parse(lines):</div><div class=\"line\">        print(line)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    dp = os.path.expanduser(<span class=\"string\">'~/Desktop/data'</span>)</div><div class=\"line\">    main(dp)</div></pre></td></tr></table></figure></p>\n<p>在解析多文件，大文件时，使用生成器以管道方式来处理是常用的手段，可以参考： A Curious Course on Coroutines and Concurrency 。</p>\n<p>完成工作后，浏览文档时看到了多进程，想到也可以使用多进程技术来充分利用多核，以加快任务的运行：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"keyword\">import</span> os.path</div><div class=\"line\"><span class=\"keyword\">import</span> fnmatch</div><div class=\"line\"><span class=\"keyword\">from</span> concurrent.futures <span class=\"keyword\">import</span> ProcessPoolExecutor</div><div class=\"line\"></div><div class=\"line\">__author__ = <span class=\"string\">\"lqs\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_parse</span><span class=\"params\">(fp)</span>:</span></div><div class=\"line\">    mac_addrs = set()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">with</span> open(fp) <span class=\"keyword\">as</span> f:</div><div class=\"line\">        <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f:</div><div class=\"line\">            *_, port, mac, sn = line.split()</div><div class=\"line\">            mac_addrs.add(<span class=\"string\">':'</span>.join([<span class=\"string\">'&#123;&#125;:&#123;&#125;'</span>.format(m[:<span class=\"number\">2</span>], m[<span class=\"number\">2</span>:]) <span class=\"keyword\">for</span> m <span class=\"keyword\">in</span> mac.split(<span class=\"string\">'-'</span>)]))</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> mac_addrs</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_parse_files</span><span class=\"params\">(dir_path, wildcard=<span class=\"string\">'*.txt'</span>)</span>:</span></div><div class=\"line\">    files = [os.path.join(dir_path, f) <span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> fnmatch.filter(os.listdir(dir_path), wildcard)]</div><div class=\"line\">    ret = set()</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\"># 使用ProcessPoolExecutor进行多进程任务, 默认的进程数为CPU个数.</span></div><div class=\"line\">    <span class=\"comment\"># `map()`是Python中很有用的小玩意, 借助正确的库可以实现并行化等强大的功能.</span></div><div class=\"line\">    <span class=\"keyword\">with</span> ProcessPoolExecutor() <span class=\"keyword\">as</span> p:</div><div class=\"line\">        <span class=\"keyword\">for</span> mac <span class=\"keyword\">in</span> p.map(_parse, files):</div><div class=\"line\">            ret.update(mac)</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> ret</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">(dir_path)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(dir_path):</div><div class=\"line\">        <span class=\"keyword\">raise</span> IOError(<span class=\"string\">'Empty directory!'</span>)</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span> mac <span class=\"keyword\">in</span> _parse_files(dir_path):</div><div class=\"line\">        print(mac)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    dp = os.path.expanduser(<span class=\"string\">'~/Desktop/data'</span>)</div><div class=\"line\">    main(dp)</div></pre></td></tr></table></figure></p>\n<p>代码看起来简洁不少！至于哪一种方式更快，内存占用更少，不好判断，所有文件总大小也不到300KB，看不出什么效果。</p>\n<p>题外话：concurrent.futures库提供一个高级接口用于异步执行调用，借助该库，我们可以轻松地实现简单的并行编程。<br>模块中的两个子类ThreadPoolExecutor和ProcessPoolExecutor分别使用多线程或多进程来异步执行函数，对于简单的并行任务而言，使用concurrent.futures比使用multiprocessing更加方便。</p>"},{"title":"Tornado源码学习: httpserver & ioloop","abbrlink":5723,"date":"2016-12-31T16:27:22.000Z","_content":"看了看Tornado源码，读到HTTPServer和IOLoop这里，发现逻辑还是比较复杂的，直接看有点晕。还是先看看早期版本，还可以看看Tornado一路过来的脉络。\n\n<!-- more -->\n\n### 一、Tornado 1.0以前\ntornado的早期版本中（1.0之前），httpserver在初始化的时候创建ioloop实例，listen的时候创建socket对象，并由ioloop实例调用其add_handler()方法为该socket的指定事件注册处理器。\nHTTPServer模块的简化代码：\n```python\nclass HTTPServer(object):\n    # 初始化HTTPServer，创建ioloop实例\n    def __init__(self, request_callback, io_loop=None):\n        self.request_callback = request_callback\n        self.io_loop = io_loop or ioloop.IOLoop.instance()\n        self._socket = None\n\n    # 在指定端口上创建socket，并由ioloop调用其add_handler()方法为socket的指定事件注册处理器\n    # add_handler()监听socket上的READ事件，事件发生的时候调用 _handle_events 进行处理\n    def listen(self, port):\n        assert not self._socket\n        self._socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)\n        self._socket.bind(\"\", port)\n        self._socket.listen(128)\n        self.io_loop.add_handler(self._socket.fileno(), self._handle_events, self.ioloop.READ)\n\n    # socket的处理器\n    def _handle_events(self, fd, events):\n        while True:\n            try:\n                connection, address = self._socket.accept()\n            except socket.error, e:\n                if e[0] in (errno.EWOULDBLOCK, errno.EAGAIN):\n                    return\n                raise\n\n            try:\n                # 调用IOStream包装socket，并在HTTPConnection中进行真正的HTTP逻辑处理\n                stream = iostream.IOStream(connection, io_loop=self.io_loop)\n                HTTPConnection(stream, address, self.request_callback)\n            except:\n                logging.error('')\n```\n\n#### socket\nsocket起源于UNIX。UNIX下一切皆文件，服务器（被动连接方）和客户端（主动链接方）各自维护一个“文件”（TCP栈缓冲区），在建立连接后，可以向各自的文件写入内容供对方读取，或读取对方内容，通讯结束后关闭文件。\n交互流程大概是这个样子：\n[图片占位，回头补]\n\nsocket对象也是模拟这个过程进行工作：\n```python\ns = socket.socket()   # 创建socket\ns.bind()     # 绑定端口\ns.listen()   # 进行监听\n```\n服务器端要能够同时响应多个连接请求，所以它必须\n1）能够标记客户端\n2）能够为每一个客户端连接创建一个新的socket对象用于响应请求\n在具体的实践中，一般是起一个while循环，在循环里accpet客户端的连接，accept的时候创建一个新的socket：\n```python\nwhile True:\n     #创建socket对象conn\n     conn, addr = s.accept()\n\n     #处理socket对象conn\n     try:\n        pass\n     except:\n        pass\n```\n\n#### ioloop\nioloop的实例化以及socket监听：\n```python\nself.io_loop = io_loop or ioloop.IOLoop.instance()\nself.io_loop.add_handler(self._socket.fileno(),self._handle_events,self.io_loop.READ)\n```\nHTTPServer初始化的时候取出或创建一个ioloop实例，ioloop实例定义了add_handler()、update_handler()、remove_handler()三个函数为socket的指定事件添加相应的处理器，并使用add_callback()来调度下一次的IO循环上的callback，使用add_timeout()来调度基于时间的事件，在ioloop的指定时间点上执行callback。\n```python\nclass IOLoop(object):\n     # 初始化，选择恰当的事件循环机制，但ioloop的实例并不在初始化的时候创建！\n     # 默认的事件循环机制为select或epoll其中的一种，选择时会首先尝试epoll\n     # IOLoop中维护了四个数据结构：_handlers，_events，_callbacks, _timeouts\n     def __init__(self, impl=None):\n          self._impl = impl or _poll()\n          self._handlers = {}\n          self._events = {}\n          self._callbacks = set()\n          self._timeouts = []\n          self._running = False\n\n     # 创建一个全局的ioloop实例。单例。\n     @classmethod\n     def instance(cls):\n          if not hasattr(cls, ‘_instance’):\n               cls._instance = cls()\n          return cls._instance\n\n     # 为socket上指定的事件注册一个handler\n     # Tornado中，IO事件有三种：READ/WRITE/ERROR\n     def add_handler(self, fd, handler, events):\n          self._handlers[fd] = handler\n          self._impl.register(fd, events | self.ERROR)\n\n     # 在下一次的ioloop循环中执行指定的callback\n     def add_callback(self, callback):\n          self._callbacks.add(callback)\n          self._wake\n\n     # Tornado中，ioloop除了可以响应IO事件外，还可以调度基于时间的事件。\n     # 官方文档中称，add_timeout()是time.sleep()的非阻塞版本。它在ioloop的某个时间点上执行指定的callback。\n     def add_timeout(self, deadline, callback):\n          timeout = _Timeout(deadline, callback)\n          bisect.insort(self._timeouts,  timeout)\n          return timeout\n\n     def _run_callback(self, callback):\n          try:\n               callback()\n          except (KeyboardInterrupt, SystemExit):\n               raise\n          except:\n               logging.error(‘Exception in callback %s’, callback, exc_info=True)\n\n     def start(self):\n          # 开始ioloop循环，处理各种callback\n          pass\n\n# 创建数据结构，保存timeout事件\nclass _Timeout(object):\n     def __init__(self, deadline, callback):\n          self.deadline = deadline\n          self.callback = callback\n\n     def __cmp__(self, other):\n          return cmp((self.deadline, id(self.callback)), (other.deadline, id(other.callback)))\n\n# 为epoll实现register等方法\nclass _EPoll(object):\n     def __init__(self):\n          pass\n     def register(self, fd, events):\n          pass\n\n# 为select实现register等方法\nclass _Select(object):\n     def __init__(self):\n          pass\n     def register(self, fd, events):\n          pass\n\n# 选择系统的事件循环机制\nif hasattr(select, ‘epoll’):\n     _poll = select.epoll\nelse:\n     try:\n          import epoll\n          _poll = _EPoll\n     except:\n          import sys\n          _poll = _Select\n```\n\n#### iostream\nioloop实例调用add_handler，为socket的指定事件注册了一个处理器： _handle_events()。\n_handle_events这个处理器中，为每一个HTTP连接创建一个socket，然后创建一个iostream对象来操作（读写）该socket。Tornado把iostream的操作包装进了HTTPConnection，在HTTPConnection中处理该HTTP连接的header，body等。\n```python\nclass IOStream(object):\n     # 把socket传入进来，为其封装一个iostream对象，通过iostream对象来操作socket\n     def __init__(self, socket, io_loop=None):\n          self.socket = socket\n          self._read_buffer = ''\n          self._write_buffer = ''\n          self._read_bytes = None\n          self.io_loop = io_loop or ioloop.IOLoop.instance()\n          self._state = self.io_loop.ERROR\n          # 添加处理器，在ioloop上监听socket事件\n          self.io_loop.add_handler(self.socket.fileno(), self._handle_events, self._state)\n\n     # 一旦socket就绪，ioloop根据不同的事件，来调度不同的处理器进行socket的read/write操作\n     def _handle_events(self, fd, events):\n          if not self.socket:\n               logging.warnning(‘Got events for closed stream %d’, fd)\n               return\n          if events & self.io_loop.READ:\n               self._handle_read()\n          if not self.socket:\n               return\n          if events & self.io_loop.WRITE:\n               self._handle_write()\n          if not self.socket:\n               return\n          if events & self.io_loop.ERROR:\n               self.close()\n               return\n\n          state = self.io_loop.ERROR\n\n          if self._read_delimiter or self._ready_bytes:\n               state |= self.io_loop.READ\n          if self._write_buffer:\n               state |= self.io_loop.WRITE\n          if state != self._state:\n               self._state = state\n               self.io_loop.update_handler(self.socket.fileno(), self._state)\n     \n     # 进入处理流程\n     def _handle_read(self):\n        try:\n            chunk = self.socket.recv(self.read_chunk_size)\n        except socket.error, e:\n            self.close()\n            return\n        \n        if not chunk:\n            self.close()\n            return\n        \n        # 把从socket中读到的数据写入缓冲区\n        self._read_buffer += chunk\n        \n        # 执行回调，消费缓冲区中的数据\n        if self._read_bytes:\n            self._run_callback(callback, self._consume(num_bytes))\n        elif self._read_delimiter:\n            self._run_callback(callback, self._consume(loc+delimiter_len))\n```\n\n#### HTTPConnection\nioloop中，接受一个socket，为其创建iostream对象，然后把iostream对象传入HTTPConnection，由HTTPConnection对象来操作iostream对象。\n底层的是socket；其上层是iostream对象，它对socket的操作进行了封装；再上层是HTTPConnection，由它来处理iostream对象。\n```python\nclass HTTPConnection(object):\n     def __init__(self, stream, address, request_callback):\n          self.stream = stream\n          self.address = address\n          self.request_callback = request_callback\n          self._request = None\n          self._request_finished = False\n          self.stream.read_until(‘\\r\\n\\r\\n’, self._on_headers)\n\n     # 把数据（chunk）写入该stream，数据写入完毕，执行callback函数 _on_write_complete\n     def write(self, chunk):\n          assert self._request, 'Request closed'\n          self.stream.write(chunk, self._on_write_complete)\n```\n\n### 二、1.0版本中的新变化\n#### HTTPServer模块中重构了listen()方法\n函数应该尽可能的功能单一，所以函数体一般要足够小，功能复杂的函数可以进行拆解成几个函数。HTTPServer中的listen()拆解成了bind()和start()两个函数。\n```python\ndef listen(self, port, address=''):\n    self.bind(port, address)\n    self.start(1)\n```\n跟socket有关的部分拆分到了bind()方法中，socket处理器注册的部分拆分到了start()方法中，并进行了功能扩充：\n```python\ndef bind(self, port, address=''):\n     pass\n\n# 功能扩充，支持多进程。默认使用单进程。\ndef start(self, num_processes=1):\n     # 若传入的处理器数不合法（None或小于等于0），获取服务器的处理器数\n     if num_processes is None or num_process <= 0:\n          try:\n               num_processes = os.sysconf('SC_NPROCESSORS_CONF')\n          except ValueError:\n               num_processes = 1\n\n     # 若处理器数大于1，判断ioloop实例是否已被创建\n     if num_processes > 1 and ioloop.IOLoop.initialized():\n          num_processes = 1\n\n     # fork出num_processes个子进程，为每一个子进程创建一个ioloop实例\n     if num_processes > 1:\n          for i in range(num_processes):\n               if os.fork() == 0:\n                    self.ioloop = ioloop.IOLoop.instance()\n                    self.ioloop.add_handler(...)\n                    return\n          os.waitpid(-1, 0)\n     else:\n          if not self.ioloop:\n               self.ioloop = ioloop.IOLoop.instance()\n          self.ioloop.add_handler(...)\n```\n\n#### ioloop中新增了PeriodicCallback\n该类用于周期性的调度某些任务。最开始的目的应该是支持autoreload，当Tornado的某个模块被修改时，自动重启ioloop实例：\n```python\nclass PeriodicCallback(object):\n     def __init__(callback, callback_time, io_loop=None):\n          self.callback = callback\n          self.callback_time = callback_time\n          self.io_loop = io_loop or IOLoop.instance()\n          self._running = True\n\n     def start(self):\n          timeout = time.time() + self.callback_time / 1000.0\n          self.io_loop.add_timeout(timeout, self._run)\n\n     def _run(self):\n          if not self._running; return\n          try:\n               self.callback()\n          except (KeyboardInput, SystemExit):\n               raise\n          except:\n               logging.error(‘Error in periodic callback’, exc_info=True)\n\n          self.start()\n```\n\nioloop中对它的调度：\n```python\nclass IOLoop(object):\n     # 初始化的时候，_timeouts为空列表\n     def __init__(self, ipml=None):\n          self._timeouts = []\n\n     # 启动ioloop\n     def start(self):\n          # ioloop进入死循环\n          while True:\n               poll_timeout = 0.2\n\n               # 检查 _callbacks 中是否有数据写入，并进入处理流程\n               callbacks = list(self._callbacks)\n               for callback in callbacks:\n                    pass\n\n               # 检查 _timeouts 中是否有数据写入，计算时间戳并比较，若过期则执行callback\n               if self._timeouts:\n                    now = time.time()\n                    while self._timeouts and self._timeouts[0].deadline <= now:\n                         timeout = self._timeouts.pop(0)\n                         self._run_callback(timeout.callback)\n                    if self._timeouts:\n                         milliseconds = self._timeouts[0].deadline - now\n                         poll_timeouts = min(milliseconds, poll_timeout)\n```\n\nautoreload是如何调用PeriodicCallback的：\n```python\ndef start(io_loop=None, check_time=500):\n     io_loop = io_loop or ioloop.IOLoop.instance()\n     modify_times = {}\n     callback = functools.partial(_reload_on_update, io_loop, modify_times)\n     scheduler = ioloop.PeriodicCallback(callback, check_time, io_loop=io_loop)\n     scheduler.start()\n```\n\n某些定时执行的任务，我们也可以直接使用它来完成。下面这个示例，每2秒钟打印一次字符串 ‘something’：\n```python\ndef print_something():\n    print('something')\n   \ndef main():\n    # 添加周期性任务到当前的ioloop\n    ioloop.PeriodicCallback(print_something, 2000).start()\n    # 启动ioloop\n    ioloop.IOLoop.instance().start()\n\nif __name__ == '__main__':\n    main()\n```\n\n### 三、Tornado 2.0\n2.0中，IOStream使用双端队列对象（deque）来缓冲从socket中读取到的数据，不再使用字符串拼接的方式。性能上是一个大的提升。\n```python\nclass IOStream(object):\n    def __init__(self):\n        # 改用用双端队列来缓存数据\n        self._read_buffer = collections.deque()\n        self._write_buffer = collections.deque()\n        self._read_bytes = None\n        \n    # 相比之前的版本，Tornado对这个函数进行了拆分，这里只处理逻辑，而数据处理工作拆分了出去。\n    # 从socket中读取数据并缓冲，调用函数_read_to_buffer()来完成；消费缓冲中的数据，调用_read_from_buffer()来完成\n    def _handle_read(self):\n        # 开启死循环从socket中读取数据\n        while True:\n            try:\n                # 缓存从socket中读取到的数据\n                result = self._read_to_buffer()\n            except Exception:\n                self.close()\n                return\n            \n            if result = 0:\n                break\n            else:\n                # 消费缓存中的数据\n                if self._read_from_buffer():\n                    return\n                \n    def _read_to_buffer(self):\n        try:\n            chunk = self._read_from_socket()\n        except socket.error, e:\n            self.close()\n            raise\n            \n        if chunk is None:\n            return 0\n        \n        # 把读取到的数据添加到队列末尾\n        self._read_buffer.append(chunk)\n        self._read_buffer_size += len(chunk)\n        if self._read_buffer_size >= self.max_buffer_size:\n            pass\n        \n        return len(chunk)\n        \n    # 读取缓冲区中的数据并消费。读取方式有两种：按大小来读取，以及按分隔符来读取\n    def _read_from_buffer(self):\n        if self._read_bytes:\n            if self._read_buffer_size >= self._read_bytes:\n                num_bytes = self._read_bytes\n                callback = self._read_callback\n                self._read_callback = None\n                self._read_bytes = None\n                self._run_callback(callback, self._consume(num_bytes))\n                return True\n        elif self._read_delimiter:\n            # 合并缓冲队列的头部\n            _merge_prefix(self._read_buffer, sys.maxin)\n            loc = self._read_buffer[0].find(self._read_delimiter)\n            if loc != -1:\n                callback = self._read_callback\n                delimiter_len = len(self._read_delimiter)\n                self._read_callback = None\n                self._read_delimiter = None\n                self._run_callback(callback, self._consume(loc+delimiter_len))\n                return True\n            \n        return False\n```\n\n\\_merge\\_prefix(deque, size)\n在缓冲数据时，把数据添加到双端队列的尾部，而从缓存中读取数据并消费时，是从头部读取的。那么一次读取多少数据就是个学问了，这个方法可以按照我们的需要，把队列头部的数据组织成合适的大小。\n\nIOStream模块中多次用到这个函数，如_handle_write()：\n```python\ndef _handle_write(self):\n    while self._write_buffer:\n        try:\n            # socket发送数据时，每次发送的数据大小不超过128KB\n            if not self._write_buffer_frozen:\n                _merge_prefix(self._write_buffer, 128*1024)\n            num_bytes = self.socket.send(self._write_buffer[0])\n        except socket.error, e:\n            self.close()\n            return\n```\n","source":"_posts/Tornado源码学习-httpserver-ioloop.md","raw":"---\ntitle: 'Tornado源码学习: httpserver & ioloop'\ntags: tornado\ncategories: python\nabbrlink: 5723\ndate: 2017-01-01 00:27:22\n---\n看了看Tornado源码，读到HTTPServer和IOLoop这里，发现逻辑还是比较复杂的，直接看有点晕。还是先看看早期版本，还可以看看Tornado一路过来的脉络。\n\n<!-- more -->\n\n### 一、Tornado 1.0以前\ntornado的早期版本中（1.0之前），httpserver在初始化的时候创建ioloop实例，listen的时候创建socket对象，并由ioloop实例调用其add_handler()方法为该socket的指定事件注册处理器。\nHTTPServer模块的简化代码：\n```python\nclass HTTPServer(object):\n    # 初始化HTTPServer，创建ioloop实例\n    def __init__(self, request_callback, io_loop=None):\n        self.request_callback = request_callback\n        self.io_loop = io_loop or ioloop.IOLoop.instance()\n        self._socket = None\n\n    # 在指定端口上创建socket，并由ioloop调用其add_handler()方法为socket的指定事件注册处理器\n    # add_handler()监听socket上的READ事件，事件发生的时候调用 _handle_events 进行处理\n    def listen(self, port):\n        assert not self._socket\n        self._socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)\n        self._socket.bind(\"\", port)\n        self._socket.listen(128)\n        self.io_loop.add_handler(self._socket.fileno(), self._handle_events, self.ioloop.READ)\n\n    # socket的处理器\n    def _handle_events(self, fd, events):\n        while True:\n            try:\n                connection, address = self._socket.accept()\n            except socket.error, e:\n                if e[0] in (errno.EWOULDBLOCK, errno.EAGAIN):\n                    return\n                raise\n\n            try:\n                # 调用IOStream包装socket，并在HTTPConnection中进行真正的HTTP逻辑处理\n                stream = iostream.IOStream(connection, io_loop=self.io_loop)\n                HTTPConnection(stream, address, self.request_callback)\n            except:\n                logging.error('')\n```\n\n#### socket\nsocket起源于UNIX。UNIX下一切皆文件，服务器（被动连接方）和客户端（主动链接方）各自维护一个“文件”（TCP栈缓冲区），在建立连接后，可以向各自的文件写入内容供对方读取，或读取对方内容，通讯结束后关闭文件。\n交互流程大概是这个样子：\n[图片占位，回头补]\n\nsocket对象也是模拟这个过程进行工作：\n```python\ns = socket.socket()   # 创建socket\ns.bind()     # 绑定端口\ns.listen()   # 进行监听\n```\n服务器端要能够同时响应多个连接请求，所以它必须\n1）能够标记客户端\n2）能够为每一个客户端连接创建一个新的socket对象用于响应请求\n在具体的实践中，一般是起一个while循环，在循环里accpet客户端的连接，accept的时候创建一个新的socket：\n```python\nwhile True:\n     #创建socket对象conn\n     conn, addr = s.accept()\n\n     #处理socket对象conn\n     try:\n        pass\n     except:\n        pass\n```\n\n#### ioloop\nioloop的实例化以及socket监听：\n```python\nself.io_loop = io_loop or ioloop.IOLoop.instance()\nself.io_loop.add_handler(self._socket.fileno(),self._handle_events,self.io_loop.READ)\n```\nHTTPServer初始化的时候取出或创建一个ioloop实例，ioloop实例定义了add_handler()、update_handler()、remove_handler()三个函数为socket的指定事件添加相应的处理器，并使用add_callback()来调度下一次的IO循环上的callback，使用add_timeout()来调度基于时间的事件，在ioloop的指定时间点上执行callback。\n```python\nclass IOLoop(object):\n     # 初始化，选择恰当的事件循环机制，但ioloop的实例并不在初始化的时候创建！\n     # 默认的事件循环机制为select或epoll其中的一种，选择时会首先尝试epoll\n     # IOLoop中维护了四个数据结构：_handlers，_events，_callbacks, _timeouts\n     def __init__(self, impl=None):\n          self._impl = impl or _poll()\n          self._handlers = {}\n          self._events = {}\n          self._callbacks = set()\n          self._timeouts = []\n          self._running = False\n\n     # 创建一个全局的ioloop实例。单例。\n     @classmethod\n     def instance(cls):\n          if not hasattr(cls, ‘_instance’):\n               cls._instance = cls()\n          return cls._instance\n\n     # 为socket上指定的事件注册一个handler\n     # Tornado中，IO事件有三种：READ/WRITE/ERROR\n     def add_handler(self, fd, handler, events):\n          self._handlers[fd] = handler\n          self._impl.register(fd, events | self.ERROR)\n\n     # 在下一次的ioloop循环中执行指定的callback\n     def add_callback(self, callback):\n          self._callbacks.add(callback)\n          self._wake\n\n     # Tornado中，ioloop除了可以响应IO事件外，还可以调度基于时间的事件。\n     # 官方文档中称，add_timeout()是time.sleep()的非阻塞版本。它在ioloop的某个时间点上执行指定的callback。\n     def add_timeout(self, deadline, callback):\n          timeout = _Timeout(deadline, callback)\n          bisect.insort(self._timeouts,  timeout)\n          return timeout\n\n     def _run_callback(self, callback):\n          try:\n               callback()\n          except (KeyboardInterrupt, SystemExit):\n               raise\n          except:\n               logging.error(‘Exception in callback %s’, callback, exc_info=True)\n\n     def start(self):\n          # 开始ioloop循环，处理各种callback\n          pass\n\n# 创建数据结构，保存timeout事件\nclass _Timeout(object):\n     def __init__(self, deadline, callback):\n          self.deadline = deadline\n          self.callback = callback\n\n     def __cmp__(self, other):\n          return cmp((self.deadline, id(self.callback)), (other.deadline, id(other.callback)))\n\n# 为epoll实现register等方法\nclass _EPoll(object):\n     def __init__(self):\n          pass\n     def register(self, fd, events):\n          pass\n\n# 为select实现register等方法\nclass _Select(object):\n     def __init__(self):\n          pass\n     def register(self, fd, events):\n          pass\n\n# 选择系统的事件循环机制\nif hasattr(select, ‘epoll’):\n     _poll = select.epoll\nelse:\n     try:\n          import epoll\n          _poll = _EPoll\n     except:\n          import sys\n          _poll = _Select\n```\n\n#### iostream\nioloop实例调用add_handler，为socket的指定事件注册了一个处理器： _handle_events()。\n_handle_events这个处理器中，为每一个HTTP连接创建一个socket，然后创建一个iostream对象来操作（读写）该socket。Tornado把iostream的操作包装进了HTTPConnection，在HTTPConnection中处理该HTTP连接的header，body等。\n```python\nclass IOStream(object):\n     # 把socket传入进来，为其封装一个iostream对象，通过iostream对象来操作socket\n     def __init__(self, socket, io_loop=None):\n          self.socket = socket\n          self._read_buffer = ''\n          self._write_buffer = ''\n          self._read_bytes = None\n          self.io_loop = io_loop or ioloop.IOLoop.instance()\n          self._state = self.io_loop.ERROR\n          # 添加处理器，在ioloop上监听socket事件\n          self.io_loop.add_handler(self.socket.fileno(), self._handle_events, self._state)\n\n     # 一旦socket就绪，ioloop根据不同的事件，来调度不同的处理器进行socket的read/write操作\n     def _handle_events(self, fd, events):\n          if not self.socket:\n               logging.warnning(‘Got events for closed stream %d’, fd)\n               return\n          if events & self.io_loop.READ:\n               self._handle_read()\n          if not self.socket:\n               return\n          if events & self.io_loop.WRITE:\n               self._handle_write()\n          if not self.socket:\n               return\n          if events & self.io_loop.ERROR:\n               self.close()\n               return\n\n          state = self.io_loop.ERROR\n\n          if self._read_delimiter or self._ready_bytes:\n               state |= self.io_loop.READ\n          if self._write_buffer:\n               state |= self.io_loop.WRITE\n          if state != self._state:\n               self._state = state\n               self.io_loop.update_handler(self.socket.fileno(), self._state)\n     \n     # 进入处理流程\n     def _handle_read(self):\n        try:\n            chunk = self.socket.recv(self.read_chunk_size)\n        except socket.error, e:\n            self.close()\n            return\n        \n        if not chunk:\n            self.close()\n            return\n        \n        # 把从socket中读到的数据写入缓冲区\n        self._read_buffer += chunk\n        \n        # 执行回调，消费缓冲区中的数据\n        if self._read_bytes:\n            self._run_callback(callback, self._consume(num_bytes))\n        elif self._read_delimiter:\n            self._run_callback(callback, self._consume(loc+delimiter_len))\n```\n\n#### HTTPConnection\nioloop中，接受一个socket，为其创建iostream对象，然后把iostream对象传入HTTPConnection，由HTTPConnection对象来操作iostream对象。\n底层的是socket；其上层是iostream对象，它对socket的操作进行了封装；再上层是HTTPConnection，由它来处理iostream对象。\n```python\nclass HTTPConnection(object):\n     def __init__(self, stream, address, request_callback):\n          self.stream = stream\n          self.address = address\n          self.request_callback = request_callback\n          self._request = None\n          self._request_finished = False\n          self.stream.read_until(‘\\r\\n\\r\\n’, self._on_headers)\n\n     # 把数据（chunk）写入该stream，数据写入完毕，执行callback函数 _on_write_complete\n     def write(self, chunk):\n          assert self._request, 'Request closed'\n          self.stream.write(chunk, self._on_write_complete)\n```\n\n### 二、1.0版本中的新变化\n#### HTTPServer模块中重构了listen()方法\n函数应该尽可能的功能单一，所以函数体一般要足够小，功能复杂的函数可以进行拆解成几个函数。HTTPServer中的listen()拆解成了bind()和start()两个函数。\n```python\ndef listen(self, port, address=''):\n    self.bind(port, address)\n    self.start(1)\n```\n跟socket有关的部分拆分到了bind()方法中，socket处理器注册的部分拆分到了start()方法中，并进行了功能扩充：\n```python\ndef bind(self, port, address=''):\n     pass\n\n# 功能扩充，支持多进程。默认使用单进程。\ndef start(self, num_processes=1):\n     # 若传入的处理器数不合法（None或小于等于0），获取服务器的处理器数\n     if num_processes is None or num_process <= 0:\n          try:\n               num_processes = os.sysconf('SC_NPROCESSORS_CONF')\n          except ValueError:\n               num_processes = 1\n\n     # 若处理器数大于1，判断ioloop实例是否已被创建\n     if num_processes > 1 and ioloop.IOLoop.initialized():\n          num_processes = 1\n\n     # fork出num_processes个子进程，为每一个子进程创建一个ioloop实例\n     if num_processes > 1:\n          for i in range(num_processes):\n               if os.fork() == 0:\n                    self.ioloop = ioloop.IOLoop.instance()\n                    self.ioloop.add_handler(...)\n                    return\n          os.waitpid(-1, 0)\n     else:\n          if not self.ioloop:\n               self.ioloop = ioloop.IOLoop.instance()\n          self.ioloop.add_handler(...)\n```\n\n#### ioloop中新增了PeriodicCallback\n该类用于周期性的调度某些任务。最开始的目的应该是支持autoreload，当Tornado的某个模块被修改时，自动重启ioloop实例：\n```python\nclass PeriodicCallback(object):\n     def __init__(callback, callback_time, io_loop=None):\n          self.callback = callback\n          self.callback_time = callback_time\n          self.io_loop = io_loop or IOLoop.instance()\n          self._running = True\n\n     def start(self):\n          timeout = time.time() + self.callback_time / 1000.0\n          self.io_loop.add_timeout(timeout, self._run)\n\n     def _run(self):\n          if not self._running; return\n          try:\n               self.callback()\n          except (KeyboardInput, SystemExit):\n               raise\n          except:\n               logging.error(‘Error in periodic callback’, exc_info=True)\n\n          self.start()\n```\n\nioloop中对它的调度：\n```python\nclass IOLoop(object):\n     # 初始化的时候，_timeouts为空列表\n     def __init__(self, ipml=None):\n          self._timeouts = []\n\n     # 启动ioloop\n     def start(self):\n          # ioloop进入死循环\n          while True:\n               poll_timeout = 0.2\n\n               # 检查 _callbacks 中是否有数据写入，并进入处理流程\n               callbacks = list(self._callbacks)\n               for callback in callbacks:\n                    pass\n\n               # 检查 _timeouts 中是否有数据写入，计算时间戳并比较，若过期则执行callback\n               if self._timeouts:\n                    now = time.time()\n                    while self._timeouts and self._timeouts[0].deadline <= now:\n                         timeout = self._timeouts.pop(0)\n                         self._run_callback(timeout.callback)\n                    if self._timeouts:\n                         milliseconds = self._timeouts[0].deadline - now\n                         poll_timeouts = min(milliseconds, poll_timeout)\n```\n\nautoreload是如何调用PeriodicCallback的：\n```python\ndef start(io_loop=None, check_time=500):\n     io_loop = io_loop or ioloop.IOLoop.instance()\n     modify_times = {}\n     callback = functools.partial(_reload_on_update, io_loop, modify_times)\n     scheduler = ioloop.PeriodicCallback(callback, check_time, io_loop=io_loop)\n     scheduler.start()\n```\n\n某些定时执行的任务，我们也可以直接使用它来完成。下面这个示例，每2秒钟打印一次字符串 ‘something’：\n```python\ndef print_something():\n    print('something')\n   \ndef main():\n    # 添加周期性任务到当前的ioloop\n    ioloop.PeriodicCallback(print_something, 2000).start()\n    # 启动ioloop\n    ioloop.IOLoop.instance().start()\n\nif __name__ == '__main__':\n    main()\n```\n\n### 三、Tornado 2.0\n2.0中，IOStream使用双端队列对象（deque）来缓冲从socket中读取到的数据，不再使用字符串拼接的方式。性能上是一个大的提升。\n```python\nclass IOStream(object):\n    def __init__(self):\n        # 改用用双端队列来缓存数据\n        self._read_buffer = collections.deque()\n        self._write_buffer = collections.deque()\n        self._read_bytes = None\n        \n    # 相比之前的版本，Tornado对这个函数进行了拆分，这里只处理逻辑，而数据处理工作拆分了出去。\n    # 从socket中读取数据并缓冲，调用函数_read_to_buffer()来完成；消费缓冲中的数据，调用_read_from_buffer()来完成\n    def _handle_read(self):\n        # 开启死循环从socket中读取数据\n        while True:\n            try:\n                # 缓存从socket中读取到的数据\n                result = self._read_to_buffer()\n            except Exception:\n                self.close()\n                return\n            \n            if result = 0:\n                break\n            else:\n                # 消费缓存中的数据\n                if self._read_from_buffer():\n                    return\n                \n    def _read_to_buffer(self):\n        try:\n            chunk = self._read_from_socket()\n        except socket.error, e:\n            self.close()\n            raise\n            \n        if chunk is None:\n            return 0\n        \n        # 把读取到的数据添加到队列末尾\n        self._read_buffer.append(chunk)\n        self._read_buffer_size += len(chunk)\n        if self._read_buffer_size >= self.max_buffer_size:\n            pass\n        \n        return len(chunk)\n        \n    # 读取缓冲区中的数据并消费。读取方式有两种：按大小来读取，以及按分隔符来读取\n    def _read_from_buffer(self):\n        if self._read_bytes:\n            if self._read_buffer_size >= self._read_bytes:\n                num_bytes = self._read_bytes\n                callback = self._read_callback\n                self._read_callback = None\n                self._read_bytes = None\n                self._run_callback(callback, self._consume(num_bytes))\n                return True\n        elif self._read_delimiter:\n            # 合并缓冲队列的头部\n            _merge_prefix(self._read_buffer, sys.maxin)\n            loc = self._read_buffer[0].find(self._read_delimiter)\n            if loc != -1:\n                callback = self._read_callback\n                delimiter_len = len(self._read_delimiter)\n                self._read_callback = None\n                self._read_delimiter = None\n                self._run_callback(callback, self._consume(loc+delimiter_len))\n                return True\n            \n        return False\n```\n\n\\_merge\\_prefix(deque, size)\n在缓冲数据时，把数据添加到双端队列的尾部，而从缓存中读取数据并消费时，是从头部读取的。那么一次读取多少数据就是个学问了，这个方法可以按照我们的需要，把队列头部的数据组织成合适的大小。\n\nIOStream模块中多次用到这个函数，如_handle_write()：\n```python\ndef _handle_write(self):\n    while self._write_buffer:\n        try:\n            # socket发送数据时，每次发送的数据大小不超过128KB\n            if not self._write_buffer_frozen:\n                _merge_prefix(self._write_buffer, 128*1024)\n            num_bytes = self.socket.send(self._write_buffer[0])\n        except socket.error, e:\n            self.close()\n            return\n```\n","slug":"Tornado源码学习-httpserver-ioloop","published":1,"updated":"2017-04-21T15:58:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1s2ul1m000catyfrxztxmhf","content":"<p>看了看Tornado源码，读到HTTPServer和IOLoop这里，发现逻辑还是比较复杂的，直接看有点晕。还是先看看早期版本，还可以看看Tornado一路过来的脉络。</p>\n<a id=\"more\"></a>\n<h3 id=\"一、Tornado-1-0以前\"><a href=\"#一、Tornado-1-0以前\" class=\"headerlink\" title=\"一、Tornado 1.0以前\"></a>一、Tornado 1.0以前</h3><p>tornado的早期版本中（1.0之前），httpserver在初始化的时候创建ioloop实例，listen的时候创建socket对象，并由ioloop实例调用其add_handler()方法为该socket的指定事件注册处理器。<br>HTTPServer模块的简化代码：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HTTPServer</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 初始化HTTPServer，创建ioloop实例</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, request_callback, io_loop=None)</span>:</span></div><div class=\"line\">        self.request_callback = request_callback</div><div class=\"line\">        self.io_loop = io_loop <span class=\"keyword\">or</span> ioloop.IOLoop.instance()</div><div class=\"line\">        self._socket = <span class=\"keyword\">None</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 在指定端口上创建socket，并由ioloop调用其add_handler()方法为socket的指定事件注册处理器</span></div><div class=\"line\">    <span class=\"comment\"># add_handler()监听socket上的READ事件，事件发生的时候调用 _handle_events 进行处理</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">listen</span><span class=\"params\">(self, port)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"keyword\">not</span> self._socket</div><div class=\"line\">        self._socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM, <span class=\"number\">0</span>)</div><div class=\"line\">        self._socket.bind(<span class=\"string\">\"\"</span>, port)</div><div class=\"line\">        self._socket.listen(<span class=\"number\">128</span>)</div><div class=\"line\">        self.io_loop.add_handler(self._socket.fileno(), self._handle_events, self.ioloop.READ)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># socket的处理器</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_handle_events</span><span class=\"params\">(self, fd, events)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">            <span class=\"keyword\">try</span>:</div><div class=\"line\">                connection, address = self._socket.accept()</div><div class=\"line\">            <span class=\"keyword\">except</span> socket.error, e:</div><div class=\"line\">                <span class=\"keyword\">if</span> e[<span class=\"number\">0</span>] <span class=\"keyword\">in</span> (errno.EWOULDBLOCK, errno.EAGAIN):</div><div class=\"line\">                    <span class=\"keyword\">return</span></div><div class=\"line\">                <span class=\"keyword\">raise</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">try</span>:</div><div class=\"line\">                <span class=\"comment\"># 调用IOStream包装socket，并在HTTPConnection中进行真正的HTTP逻辑处理</span></div><div class=\"line\">                stream = iostream.IOStream(connection, io_loop=self.io_loop)</div><div class=\"line\">                HTTPConnection(stream, address, self.request_callback)</div><div class=\"line\">            <span class=\"keyword\">except</span>:</div><div class=\"line\">                logging.error(<span class=\"string\">''</span>)</div></pre></td></tr></table></figure></p>\n<h4 id=\"socket\"><a href=\"#socket\" class=\"headerlink\" title=\"socket\"></a>socket</h4><p>socket起源于UNIX。UNIX下一切皆文件，服务器（被动连接方）和客户端（主动链接方）各自维护一个“文件”（TCP栈缓冲区），在建立连接后，可以向各自的文件写入内容供对方读取，或读取对方内容，通讯结束后关闭文件。<br>交互流程大概是这个样子：<br>[图片占位，回头补]</p>\n<p>socket对象也是模拟这个过程进行工作：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">s = socket.socket()   <span class=\"comment\"># 创建socket</span></div><div class=\"line\">s.bind()     <span class=\"comment\"># 绑定端口</span></div><div class=\"line\">s.listen()   <span class=\"comment\"># 进行监听</span></div></pre></td></tr></table></figure></p>\n<p>服务器端要能够同时响应多个连接请求，所以它必须<br>1）能够标记客户端<br>2）能够为每一个客户端连接创建一个新的socket对象用于响应请求<br>在具体的实践中，一般是起一个while循环，在循环里accpet客户端的连接，accept的时候创建一个新的socket：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">     <span class=\"comment\">#创建socket对象conn</span></div><div class=\"line\">     conn, addr = s.accept()</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">#处理socket对象conn</span></div><div class=\"line\">     <span class=\"keyword\">try</span>:</div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\">     <span class=\"keyword\">except</span>:</div><div class=\"line\">        <span class=\"keyword\">pass</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"ioloop\"><a href=\"#ioloop\" class=\"headerlink\" title=\"ioloop\"></a>ioloop</h4><p>ioloop的实例化以及socket监听：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">self.io_loop = io_loop <span class=\"keyword\">or</span> ioloop.IOLoop.instance()</div><div class=\"line\">self.io_loop.add_handler(self._socket.fileno(),self._handle_events,self.io_loop.READ)</div></pre></td></tr></table></figure></p>\n<p>HTTPServer初始化的时候取出或创建一个ioloop实例，ioloop实例定义了add_handler()、update_handler()、remove_handler()三个函数为socket的指定事件添加相应的处理器，并使用add_callback()来调度下一次的IO循环上的callback，使用add_timeout()来调度基于时间的事件，在ioloop的指定时间点上执行callback。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IOLoop</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">     <span class=\"comment\"># 初始化，选择恰当的事件循环机制，但ioloop的实例并不在初始化的时候创建！</span></div><div class=\"line\">     <span class=\"comment\"># 默认的事件循环机制为select或epoll其中的一种，选择时会首先尝试epoll</span></div><div class=\"line\">     <span class=\"comment\"># IOLoop中维护了四个数据结构：_handlers，_events，_callbacks, _timeouts</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, impl=None)</span>:</span></div><div class=\"line\">          self._impl = impl <span class=\"keyword\">or</span> _poll()</div><div class=\"line\">          self._handlers = &#123;&#125;</div><div class=\"line\">          self._events = &#123;&#125;</div><div class=\"line\">          self._callbacks = set()</div><div class=\"line\">          self._timeouts = []</div><div class=\"line\">          self._running = <span class=\"keyword\">False</span></div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\"># 创建一个全局的ioloop实例。单例。</span></div><div class=\"line\"><span class=\"meta\">     @classmethod</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">instance</span><span class=\"params\">(cls)</span>:</span></div><div class=\"line\">          <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> hasattr(cls, ‘_instance’):</div><div class=\"line\">               cls._instance = cls()</div><div class=\"line\">          <span class=\"keyword\">return</span> cls._instance</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\"># 为socket上指定的事件注册一个handler</span></div><div class=\"line\">     <span class=\"comment\"># Tornado中，IO事件有三种：READ/WRITE/ERROR</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_handler</span><span class=\"params\">(self, fd, handler, events)</span>:</span></div><div class=\"line\">          self._handlers[fd] = handler</div><div class=\"line\">          self._impl.register(fd, events | self.ERROR)</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\"># 在下一次的ioloop循环中执行指定的callback</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_callback</span><span class=\"params\">(self, callback)</span>:</span></div><div class=\"line\">          self._callbacks.add(callback)</div><div class=\"line\">          self._wake</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\"># Tornado中，ioloop除了可以响应IO事件外，还可以调度基于时间的事件。</span></div><div class=\"line\">     <span class=\"comment\"># 官方文档中称，add_timeout()是time.sleep()的非阻塞版本。它在ioloop的某个时间点上执行指定的callback。</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_timeout</span><span class=\"params\">(self, deadline, callback)</span>:</span></div><div class=\"line\">          timeout = _Timeout(deadline, callback)</div><div class=\"line\">          bisect.insort(self._timeouts,  timeout)</div><div class=\"line\">          <span class=\"keyword\">return</span> timeout</div><div class=\"line\"></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_run_callback</span><span class=\"params\">(self, callback)</span>:</span></div><div class=\"line\">          <span class=\"keyword\">try</span>:</div><div class=\"line\">               callback()</div><div class=\"line\">          <span class=\"keyword\">except</span> (KeyboardInterrupt, SystemExit):</div><div class=\"line\">               <span class=\"keyword\">raise</span></div><div class=\"line\">          <span class=\"keyword\">except</span>:</div><div class=\"line\">               logging.error(‘Exception <span class=\"keyword\">in</span> callback %s’, callback, exc_info=<span class=\"keyword\">True</span>)</div><div class=\"line\"></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">          <span class=\"comment\"># 开始ioloop循环，处理各种callback</span></div><div class=\"line\">          <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 创建数据结构，保存timeout事件</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_Timeout</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, deadline, callback)</span>:</span></div><div class=\"line\">          self.deadline = deadline</div><div class=\"line\">          self.callback = callback</div><div class=\"line\"></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__cmp__</span><span class=\"params\">(self, other)</span>:</span></div><div class=\"line\">          <span class=\"keyword\">return</span> cmp((self.deadline, id(self.callback)), (other.deadline, id(other.callback)))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 为epoll实现register等方法</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_EPoll</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">          <span class=\"keyword\">pass</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">register</span><span class=\"params\">(self, fd, events)</span>:</span></div><div class=\"line\">          <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 为select实现register等方法</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_Select</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">          <span class=\"keyword\">pass</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">register</span><span class=\"params\">(self, fd, events)</span>:</span></div><div class=\"line\">          <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 选择系统的事件循环机制</span></div><div class=\"line\"><span class=\"keyword\">if</span> hasattr(select, ‘epoll’):</div><div class=\"line\">     _poll = select.epoll</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">     <span class=\"keyword\">try</span>:</div><div class=\"line\">          <span class=\"keyword\">import</span> epoll</div><div class=\"line\">          _poll = _EPoll</div><div class=\"line\">     <span class=\"keyword\">except</span>:</div><div class=\"line\">          <span class=\"keyword\">import</span> sys</div><div class=\"line\">          _poll = _Select</div></pre></td></tr></table></figure></p>\n<h4 id=\"iostream\"><a href=\"#iostream\" class=\"headerlink\" title=\"iostream\"></a>iostream</h4><p>ioloop实例调用add_handler，为socket的指定事件注册了一个处理器： _handle_events()。<br>_handle_events这个处理器中，为每一个HTTP连接创建一个socket，然后创建一个iostream对象来操作（读写）该socket。Tornado把iostream的操作包装进了HTTPConnection，在HTTPConnection中处理该HTTP连接的header，body等。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IOStream</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">     <span class=\"comment\"># 把socket传入进来，为其封装一个iostream对象，通过iostream对象来操作socket</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, socket, io_loop=None)</span>:</span></div><div class=\"line\">          self.socket = socket</div><div class=\"line\">          self._read_buffer = <span class=\"string\">''</span></div><div class=\"line\">          self._write_buffer = <span class=\"string\">''</span></div><div class=\"line\">          self._read_bytes = <span class=\"keyword\">None</span></div><div class=\"line\">          self.io_loop = io_loop <span class=\"keyword\">or</span> ioloop.IOLoop.instance()</div><div class=\"line\">          self._state = self.io_loop.ERROR</div><div class=\"line\">          <span class=\"comment\"># 添加处理器，在ioloop上监听socket事件</span></div><div class=\"line\">          self.io_loop.add_handler(self.socket.fileno(), self._handle_events, self._state)</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\"># 一旦socket就绪，ioloop根据不同的事件，来调度不同的处理器进行socket的read/write操作</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_handle_events</span><span class=\"params\">(self, fd, events)</span>:</span></div><div class=\"line\">          <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.socket:</div><div class=\"line\">               logging.warnning(‘Got events <span class=\"keyword\">for</span> closed stream %d’, fd)</div><div class=\"line\">               <span class=\"keyword\">return</span></div><div class=\"line\">          <span class=\"keyword\">if</span> events &amp; self.io_loop.READ:</div><div class=\"line\">               self._handle_read()</div><div class=\"line\">          <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.socket:</div><div class=\"line\">               <span class=\"keyword\">return</span></div><div class=\"line\">          <span class=\"keyword\">if</span> events &amp; self.io_loop.WRITE:</div><div class=\"line\">               self._handle_write()</div><div class=\"line\">          <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.socket:</div><div class=\"line\">               <span class=\"keyword\">return</span></div><div class=\"line\">          <span class=\"keyword\">if</span> events &amp; self.io_loop.ERROR:</div><div class=\"line\">               self.close()</div><div class=\"line\">               <span class=\"keyword\">return</span></div><div class=\"line\"></div><div class=\"line\">          state = self.io_loop.ERROR</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">if</span> self._read_delimiter <span class=\"keyword\">or</span> self._ready_bytes:</div><div class=\"line\">               state |= self.io_loop.READ</div><div class=\"line\">          <span class=\"keyword\">if</span> self._write_buffer:</div><div class=\"line\">               state |= self.io_loop.WRITE</div><div class=\"line\">          <span class=\"keyword\">if</span> state != self._state:</div><div class=\"line\">               self._state = state</div><div class=\"line\">               self.io_loop.update_handler(self.socket.fileno(), self._state)</div><div class=\"line\">     </div><div class=\"line\">     <span class=\"comment\"># 进入处理流程</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_handle_read</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            chunk = self.socket.recv(self.read_chunk_size)</div><div class=\"line\">        <span class=\"keyword\">except</span> socket.error, e:</div><div class=\"line\">            self.close()</div><div class=\"line\">            <span class=\"keyword\">return</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> chunk:</div><div class=\"line\">            self.close()</div><div class=\"line\">            <span class=\"keyword\">return</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\"># 把从socket中读到的数据写入缓冲区</span></div><div class=\"line\">        self._read_buffer += chunk</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\"># 执行回调，消费缓冲区中的数据</span></div><div class=\"line\">        <span class=\"keyword\">if</span> self._read_bytes:</div><div class=\"line\">            self._run_callback(callback, self._consume(num_bytes))</div><div class=\"line\">        <span class=\"keyword\">elif</span> self._read_delimiter:</div><div class=\"line\">            self._run_callback(callback, self._consume(loc+delimiter_len))</div></pre></td></tr></table></figure></p>\n<h4 id=\"HTTPConnection\"><a href=\"#HTTPConnection\" class=\"headerlink\" title=\"HTTPConnection\"></a>HTTPConnection</h4><p>ioloop中，接受一个socket，为其创建iostream对象，然后把iostream对象传入HTTPConnection，由HTTPConnection对象来操作iostream对象。<br>底层的是socket；其上层是iostream对象，它对socket的操作进行了封装；再上层是HTTPConnection，由它来处理iostream对象。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HTTPConnection</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, stream, address, request_callback)</span>:</span></div><div class=\"line\">          self.stream = stream</div><div class=\"line\">          self.address = address</div><div class=\"line\">          self.request_callback = request_callback</div><div class=\"line\">          self._request = <span class=\"keyword\">None</span></div><div class=\"line\">          self._request_finished = <span class=\"keyword\">False</span></div><div class=\"line\">          self.stream.read_until(‘\\r\\n\\r\\n’, self._on_headers)</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\"># 把数据（chunk）写入该stream，数据写入完毕，执行callback函数 _on_write_complete</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">write</span><span class=\"params\">(self, chunk)</span>:</span></div><div class=\"line\">          <span class=\"keyword\">assert</span> self._request, <span class=\"string\">'Request closed'</span></div><div class=\"line\">          self.stream.write(chunk, self._on_write_complete)</div></pre></td></tr></table></figure></p>\n<h3 id=\"二、1-0版本中的新变化\"><a href=\"#二、1-0版本中的新变化\" class=\"headerlink\" title=\"二、1.0版本中的新变化\"></a>二、1.0版本中的新变化</h3><h4 id=\"HTTPServer模块中重构了listen-方法\"><a href=\"#HTTPServer模块中重构了listen-方法\" class=\"headerlink\" title=\"HTTPServer模块中重构了listen()方法\"></a>HTTPServer模块中重构了listen()方法</h4><p>函数应该尽可能的功能单一，所以函数体一般要足够小，功能复杂的函数可以进行拆解成几个函数。HTTPServer中的listen()拆解成了bind()和start()两个函数。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">listen</span><span class=\"params\">(self, port, address=<span class=\"string\">''</span>)</span>:</span></div><div class=\"line\">    self.bind(port, address)</div><div class=\"line\">    self.start(<span class=\"number\">1</span>)</div></pre></td></tr></table></figure></p>\n<p>跟socket有关的部分拆分到了bind()方法中，socket处理器注册的部分拆分到了start()方法中，并进行了功能扩充：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bind</span><span class=\"params\">(self, port, address=<span class=\"string\">''</span>)</span>:</span></div><div class=\"line\">     <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 功能扩充，支持多进程。默认使用单进程。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start</span><span class=\"params\">(self, num_processes=<span class=\"number\">1</span>)</span>:</span></div><div class=\"line\">     <span class=\"comment\"># 若传入的处理器数不合法（None或小于等于0），获取服务器的处理器数</span></div><div class=\"line\">     <span class=\"keyword\">if</span> num_processes <span class=\"keyword\">is</span> <span class=\"keyword\">None</span> <span class=\"keyword\">or</span> num_process &lt;= <span class=\"number\">0</span>:</div><div class=\"line\">          <span class=\"keyword\">try</span>:</div><div class=\"line\">               num_processes = os.sysconf(<span class=\"string\">'SC_NPROCESSORS_CONF'</span>)</div><div class=\"line\">          <span class=\"keyword\">except</span> ValueError:</div><div class=\"line\">               num_processes = <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\"># 若处理器数大于1，判断ioloop实例是否已被创建</span></div><div class=\"line\">     <span class=\"keyword\">if</span> num_processes &gt; <span class=\"number\">1</span> <span class=\"keyword\">and</span> ioloop.IOLoop.initialized():</div><div class=\"line\">          num_processes = <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\"># fork出num_processes个子进程，为每一个子进程创建一个ioloop实例</span></div><div class=\"line\">     <span class=\"keyword\">if</span> num_processes &gt; <span class=\"number\">1</span>:</div><div class=\"line\">          <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(num_processes):</div><div class=\"line\">               <span class=\"keyword\">if</span> os.fork() == <span class=\"number\">0</span>:</div><div class=\"line\">                    self.ioloop = ioloop.IOLoop.instance()</div><div class=\"line\">                    self.ioloop.add_handler(...)</div><div class=\"line\">                    <span class=\"keyword\">return</span></div><div class=\"line\">          os.waitpid(<span class=\"number\">-1</span>, <span class=\"number\">0</span>)</div><div class=\"line\">     <span class=\"keyword\">else</span>:</div><div class=\"line\">          <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.ioloop:</div><div class=\"line\">               self.ioloop = ioloop.IOLoop.instance()</div><div class=\"line\">          self.ioloop.add_handler(...)</div></pre></td></tr></table></figure></p>\n<h4 id=\"ioloop中新增了PeriodicCallback\"><a href=\"#ioloop中新增了PeriodicCallback\" class=\"headerlink\" title=\"ioloop中新增了PeriodicCallback\"></a>ioloop中新增了PeriodicCallback</h4><p>该类用于周期性的调度某些任务。最开始的目的应该是支持autoreload，当Tornado的某个模块被修改时，自动重启ioloop实例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeriodicCallback</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(callback, callback_time, io_loop=None)</span>:</span></div><div class=\"line\">          self.callback = callback</div><div class=\"line\">          self.callback_time = callback_time</div><div class=\"line\">          self.io_loop = io_loop <span class=\"keyword\">or</span> IOLoop.instance()</div><div class=\"line\">          self._running = <span class=\"keyword\">True</span></div><div class=\"line\"></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">          timeout = time.time() + self.callback_time / <span class=\"number\">1000.0</span></div><div class=\"line\">          self.io_loop.add_timeout(timeout, self._run)</div><div class=\"line\"></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_run</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">          <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self._running; <span class=\"keyword\">return</span></div><div class=\"line\">          <span class=\"keyword\">try</span>:</div><div class=\"line\">               self.callback()</div><div class=\"line\">          <span class=\"keyword\">except</span> (KeyboardInput, SystemExit):</div><div class=\"line\">               <span class=\"keyword\">raise</span></div><div class=\"line\">          <span class=\"keyword\">except</span>:</div><div class=\"line\">               logging.error(‘Error <span class=\"keyword\">in</span> periodic callback’, exc_info=<span class=\"keyword\">True</span>)</div><div class=\"line\"></div><div class=\"line\">          self.start()</div></pre></td></tr></table></figure></p>\n<p>ioloop中对它的调度：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IOLoop</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">     <span class=\"comment\"># 初始化的时候，_timeouts为空列表</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, ipml=None)</span>:</span></div><div class=\"line\">          self._timeouts = []</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\"># 启动ioloop</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">          <span class=\"comment\"># ioloop进入死循环</span></div><div class=\"line\">          <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">               poll_timeout = <span class=\"number\">0.2</span></div><div class=\"line\"></div><div class=\"line\">               <span class=\"comment\"># 检查 _callbacks 中是否有数据写入，并进入处理流程</span></div><div class=\"line\">               callbacks = list(self._callbacks)</div><div class=\"line\">               <span class=\"keyword\">for</span> callback <span class=\"keyword\">in</span> callbacks:</div><div class=\"line\">                    <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\">               <span class=\"comment\"># 检查 _timeouts 中是否有数据写入，计算时间戳并比较，若过期则执行callback</span></div><div class=\"line\">               <span class=\"keyword\">if</span> self._timeouts:</div><div class=\"line\">                    now = time.time()</div><div class=\"line\">                    <span class=\"keyword\">while</span> self._timeouts <span class=\"keyword\">and</span> self._timeouts[<span class=\"number\">0</span>].deadline &lt;= now:</div><div class=\"line\">                         timeout = self._timeouts.pop(<span class=\"number\">0</span>)</div><div class=\"line\">                         self._run_callback(timeout.callback)</div><div class=\"line\">                    <span class=\"keyword\">if</span> self._timeouts:</div><div class=\"line\">                         milliseconds = self._timeouts[<span class=\"number\">0</span>].deadline - now</div><div class=\"line\">                         poll_timeouts = min(milliseconds, poll_timeout)</div></pre></td></tr></table></figure></p>\n<p>autoreload是如何调用PeriodicCallback的：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start</span><span class=\"params\">(io_loop=None, check_time=<span class=\"number\">500</span>)</span>:</span></div><div class=\"line\">     io_loop = io_loop <span class=\"keyword\">or</span> ioloop.IOLoop.instance()</div><div class=\"line\">     modify_times = &#123;&#125;</div><div class=\"line\">     callback = functools.partial(_reload_on_update, io_loop, modify_times)</div><div class=\"line\">     scheduler = ioloop.PeriodicCallback(callback, check_time, io_loop=io_loop)</div><div class=\"line\">     scheduler.start()</div></pre></td></tr></table></figure></p>\n<p>某些定时执行的任务，我们也可以直接使用它来完成。下面这个示例，每2秒钟打印一次字符串 ‘something’：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_something</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'something'</span>)</div><div class=\"line\">   </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 添加周期性任务到当前的ioloop</span></div><div class=\"line\">    ioloop.PeriodicCallback(print_something, <span class=\"number\">2000</span>).start()</div><div class=\"line\">    <span class=\"comment\"># 启动ioloop</span></div><div class=\"line\">    ioloop.IOLoop.instance().start()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    main()</div></pre></td></tr></table></figure></p>\n<h3 id=\"三、Tornado-2-0\"><a href=\"#三、Tornado-2-0\" class=\"headerlink\" title=\"三、Tornado 2.0\"></a>三、Tornado 2.0</h3><p>2.0中，IOStream使用双端队列对象（deque）来缓冲从socket中读取到的数据，不再使用字符串拼接的方式。性能上是一个大的提升。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IOStream</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"comment\"># 改用用双端队列来缓存数据</span></div><div class=\"line\">        self._read_buffer = collections.deque()</div><div class=\"line\">        self._write_buffer = collections.deque()</div><div class=\"line\">        self._read_bytes = <span class=\"keyword\">None</span></div><div class=\"line\">        </div><div class=\"line\">    <span class=\"comment\"># 相比之前的版本，Tornado对这个函数进行了拆分，这里只处理逻辑，而数据处理工作拆分了出去。</span></div><div class=\"line\">    <span class=\"comment\"># 从socket中读取数据并缓冲，调用函数_read_to_buffer()来完成；消费缓冲中的数据，调用_read_from_buffer()来完成</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_handle_read</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"comment\"># 开启死循环从socket中读取数据</span></div><div class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">            <span class=\"keyword\">try</span>:</div><div class=\"line\">                <span class=\"comment\"># 缓存从socket中读取到的数据</span></div><div class=\"line\">                result = self._read_to_buffer()</div><div class=\"line\">            <span class=\"keyword\">except</span> Exception:</div><div class=\"line\">                self.close()</div><div class=\"line\">                <span class=\"keyword\">return</span></div><div class=\"line\">            </div><div class=\"line\">            <span class=\"keyword\">if</span> result = <span class=\"number\">0</span>:</div><div class=\"line\">                <span class=\"keyword\">break</span></div><div class=\"line\">            <span class=\"keyword\">else</span>:</div><div class=\"line\">                <span class=\"comment\"># 消费缓存中的数据</span></div><div class=\"line\">                <span class=\"keyword\">if</span> self._read_from_buffer():</div><div class=\"line\">                    <span class=\"keyword\">return</span></div><div class=\"line\">                </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_read_to_buffer</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            chunk = self._read_from_socket()</div><div class=\"line\">        <span class=\"keyword\">except</span> socket.error, e:</div><div class=\"line\">            self.close()</div><div class=\"line\">            <span class=\"keyword\">raise</span></div><div class=\"line\">            </div><div class=\"line\">        <span class=\"keyword\">if</span> chunk <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\"># 把读取到的数据添加到队列末尾</span></div><div class=\"line\">        self._read_buffer.append(chunk)</div><div class=\"line\">        self._read_buffer_size += len(chunk)</div><div class=\"line\">        <span class=\"keyword\">if</span> self._read_buffer_size &gt;= self.max_buffer_size:</div><div class=\"line\">            <span class=\"keyword\">pass</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> len(chunk)</div><div class=\"line\">        </div><div class=\"line\">    <span class=\"comment\"># 读取缓冲区中的数据并消费。读取方式有两种：按大小来读取，以及按分隔符来读取</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_read_from_buffer</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> self._read_bytes:</div><div class=\"line\">            <span class=\"keyword\">if</span> self._read_buffer_size &gt;= self._read_bytes:</div><div class=\"line\">                num_bytes = self._read_bytes</div><div class=\"line\">                callback = self._read_callback</div><div class=\"line\">                self._read_callback = <span class=\"keyword\">None</span></div><div class=\"line\">                self._read_bytes = <span class=\"keyword\">None</span></div><div class=\"line\">                self._run_callback(callback, self._consume(num_bytes))</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></div><div class=\"line\">        <span class=\"keyword\">elif</span> self._read_delimiter:</div><div class=\"line\">            <span class=\"comment\"># 合并缓冲队列的头部</span></div><div class=\"line\">            _merge_prefix(self._read_buffer, sys.maxin)</div><div class=\"line\">            loc = self._read_buffer[<span class=\"number\">0</span>].find(self._read_delimiter)</div><div class=\"line\">            <span class=\"keyword\">if</span> loc != <span class=\"number\">-1</span>:</div><div class=\"line\">                callback = self._read_callback</div><div class=\"line\">                delimiter_len = len(self._read_delimiter)</div><div class=\"line\">                self._read_callback = <span class=\"keyword\">None</span></div><div class=\"line\">                self._read_delimiter = <span class=\"keyword\">None</span></div><div class=\"line\">                self._run_callback(callback, self._consume(loc+delimiter_len))</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></div><div class=\"line\">            </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></div></pre></td></tr></table></figure></p>\n<p>_merge_prefix(deque, size)<br>在缓冲数据时，把数据添加到双端队列的尾部，而从缓存中读取数据并消费时，是从头部读取的。那么一次读取多少数据就是个学问了，这个方法可以按照我们的需要，把队列头部的数据组织成合适的大小。</p>\n<p>IOStream模块中多次用到这个函数，如_handle_write()：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_handle_write</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">while</span> self._write_buffer:</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            <span class=\"comment\"># socket发送数据时，每次发送的数据大小不超过128KB</span></div><div class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self._write_buffer_frozen:</div><div class=\"line\">                _merge_prefix(self._write_buffer, <span class=\"number\">128</span>*<span class=\"number\">1024</span>)</div><div class=\"line\">            num_bytes = self.socket.send(self._write_buffer[<span class=\"number\">0</span>])</div><div class=\"line\">        <span class=\"keyword\">except</span> socket.error, e:</div><div class=\"line\">            self.close()</div><div class=\"line\">            <span class=\"keyword\">return</span></div></pre></td></tr></table></figure></p>\n","excerpt":"<p>看了看Tornado源码，读到HTTPServer和IOLoop这里，发现逻辑还是比较复杂的，直接看有点晕。还是先看看早期版本，还可以看看Tornado一路过来的脉络。</p>","more":"<h3 id=\"一、Tornado-1-0以前\"><a href=\"#一、Tornado-1-0以前\" class=\"headerlink\" title=\"一、Tornado 1.0以前\"></a>一、Tornado 1.0以前</h3><p>tornado的早期版本中（1.0之前），httpserver在初始化的时候创建ioloop实例，listen的时候创建socket对象，并由ioloop实例调用其add_handler()方法为该socket的指定事件注册处理器。<br>HTTPServer模块的简化代码：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HTTPServer</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 初始化HTTPServer，创建ioloop实例</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, request_callback, io_loop=None)</span>:</span></div><div class=\"line\">        self.request_callback = request_callback</div><div class=\"line\">        self.io_loop = io_loop <span class=\"keyword\">or</span> ioloop.IOLoop.instance()</div><div class=\"line\">        self._socket = <span class=\"keyword\">None</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 在指定端口上创建socket，并由ioloop调用其add_handler()方法为socket的指定事件注册处理器</span></div><div class=\"line\">    <span class=\"comment\"># add_handler()监听socket上的READ事件，事件发生的时候调用 _handle_events 进行处理</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">listen</span><span class=\"params\">(self, port)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"keyword\">not</span> self._socket</div><div class=\"line\">        self._socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM, <span class=\"number\">0</span>)</div><div class=\"line\">        self._socket.bind(<span class=\"string\">\"\"</span>, port)</div><div class=\"line\">        self._socket.listen(<span class=\"number\">128</span>)</div><div class=\"line\">        self.io_loop.add_handler(self._socket.fileno(), self._handle_events, self.ioloop.READ)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># socket的处理器</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_handle_events</span><span class=\"params\">(self, fd, events)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">            <span class=\"keyword\">try</span>:</div><div class=\"line\">                connection, address = self._socket.accept()</div><div class=\"line\">            <span class=\"keyword\">except</span> socket.error, e:</div><div class=\"line\">                <span class=\"keyword\">if</span> e[<span class=\"number\">0</span>] <span class=\"keyword\">in</span> (errno.EWOULDBLOCK, errno.EAGAIN):</div><div class=\"line\">                    <span class=\"keyword\">return</span></div><div class=\"line\">                <span class=\"keyword\">raise</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">try</span>:</div><div class=\"line\">                <span class=\"comment\"># 调用IOStream包装socket，并在HTTPConnection中进行真正的HTTP逻辑处理</span></div><div class=\"line\">                stream = iostream.IOStream(connection, io_loop=self.io_loop)</div><div class=\"line\">                HTTPConnection(stream, address, self.request_callback)</div><div class=\"line\">            <span class=\"keyword\">except</span>:</div><div class=\"line\">                logging.error(<span class=\"string\">''</span>)</div></pre></td></tr></table></figure></p>\n<h4 id=\"socket\"><a href=\"#socket\" class=\"headerlink\" title=\"socket\"></a>socket</h4><p>socket起源于UNIX。UNIX下一切皆文件，服务器（被动连接方）和客户端（主动链接方）各自维护一个“文件”（TCP栈缓冲区），在建立连接后，可以向各自的文件写入内容供对方读取，或读取对方内容，通讯结束后关闭文件。<br>交互流程大概是这个样子：<br>[图片占位，回头补]</p>\n<p>socket对象也是模拟这个过程进行工作：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">s = socket.socket()   <span class=\"comment\"># 创建socket</span></div><div class=\"line\">s.bind()     <span class=\"comment\"># 绑定端口</span></div><div class=\"line\">s.listen()   <span class=\"comment\"># 进行监听</span></div></pre></td></tr></table></figure></p>\n<p>服务器端要能够同时响应多个连接请求，所以它必须<br>1）能够标记客户端<br>2）能够为每一个客户端连接创建一个新的socket对象用于响应请求<br>在具体的实践中，一般是起一个while循环，在循环里accpet客户端的连接，accept的时候创建一个新的socket：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">     <span class=\"comment\">#创建socket对象conn</span></div><div class=\"line\">     conn, addr = s.accept()</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">#处理socket对象conn</span></div><div class=\"line\">     <span class=\"keyword\">try</span>:</div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\">     <span class=\"keyword\">except</span>:</div><div class=\"line\">        <span class=\"keyword\">pass</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"ioloop\"><a href=\"#ioloop\" class=\"headerlink\" title=\"ioloop\"></a>ioloop</h4><p>ioloop的实例化以及socket监听：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">self.io_loop = io_loop <span class=\"keyword\">or</span> ioloop.IOLoop.instance()</div><div class=\"line\">self.io_loop.add_handler(self._socket.fileno(),self._handle_events,self.io_loop.READ)</div></pre></td></tr></table></figure></p>\n<p>HTTPServer初始化的时候取出或创建一个ioloop实例，ioloop实例定义了add_handler()、update_handler()、remove_handler()三个函数为socket的指定事件添加相应的处理器，并使用add_callback()来调度下一次的IO循环上的callback，使用add_timeout()来调度基于时间的事件，在ioloop的指定时间点上执行callback。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IOLoop</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">     <span class=\"comment\"># 初始化，选择恰当的事件循环机制，但ioloop的实例并不在初始化的时候创建！</span></div><div class=\"line\">     <span class=\"comment\"># 默认的事件循环机制为select或epoll其中的一种，选择时会首先尝试epoll</span></div><div class=\"line\">     <span class=\"comment\"># IOLoop中维护了四个数据结构：_handlers，_events，_callbacks, _timeouts</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, impl=None)</span>:</span></div><div class=\"line\">          self._impl = impl <span class=\"keyword\">or</span> _poll()</div><div class=\"line\">          self._handlers = &#123;&#125;</div><div class=\"line\">          self._events = &#123;&#125;</div><div class=\"line\">          self._callbacks = set()</div><div class=\"line\">          self._timeouts = []</div><div class=\"line\">          self._running = <span class=\"keyword\">False</span></div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\"># 创建一个全局的ioloop实例。单例。</span></div><div class=\"line\"><span class=\"meta\">     @classmethod</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">instance</span><span class=\"params\">(cls)</span>:</span></div><div class=\"line\">          <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> hasattr(cls, ‘_instance’):</div><div class=\"line\">               cls._instance = cls()</div><div class=\"line\">          <span class=\"keyword\">return</span> cls._instance</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\"># 为socket上指定的事件注册一个handler</span></div><div class=\"line\">     <span class=\"comment\"># Tornado中，IO事件有三种：READ/WRITE/ERROR</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_handler</span><span class=\"params\">(self, fd, handler, events)</span>:</span></div><div class=\"line\">          self._handlers[fd] = handler</div><div class=\"line\">          self._impl.register(fd, events | self.ERROR)</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\"># 在下一次的ioloop循环中执行指定的callback</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_callback</span><span class=\"params\">(self, callback)</span>:</span></div><div class=\"line\">          self._callbacks.add(callback)</div><div class=\"line\">          self._wake</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\"># Tornado中，ioloop除了可以响应IO事件外，还可以调度基于时间的事件。</span></div><div class=\"line\">     <span class=\"comment\"># 官方文档中称，add_timeout()是time.sleep()的非阻塞版本。它在ioloop的某个时间点上执行指定的callback。</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_timeout</span><span class=\"params\">(self, deadline, callback)</span>:</span></div><div class=\"line\">          timeout = _Timeout(deadline, callback)</div><div class=\"line\">          bisect.insort(self._timeouts,  timeout)</div><div class=\"line\">          <span class=\"keyword\">return</span> timeout</div><div class=\"line\"></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_run_callback</span><span class=\"params\">(self, callback)</span>:</span></div><div class=\"line\">          <span class=\"keyword\">try</span>:</div><div class=\"line\">               callback()</div><div class=\"line\">          <span class=\"keyword\">except</span> (KeyboardInterrupt, SystemExit):</div><div class=\"line\">               <span class=\"keyword\">raise</span></div><div class=\"line\">          <span class=\"keyword\">except</span>:</div><div class=\"line\">               logging.error(‘Exception <span class=\"keyword\">in</span> callback %s’, callback, exc_info=<span class=\"keyword\">True</span>)</div><div class=\"line\"></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">          <span class=\"comment\"># 开始ioloop循环，处理各种callback</span></div><div class=\"line\">          <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 创建数据结构，保存timeout事件</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_Timeout</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, deadline, callback)</span>:</span></div><div class=\"line\">          self.deadline = deadline</div><div class=\"line\">          self.callback = callback</div><div class=\"line\"></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__cmp__</span><span class=\"params\">(self, other)</span>:</span></div><div class=\"line\">          <span class=\"keyword\">return</span> cmp((self.deadline, id(self.callback)), (other.deadline, id(other.callback)))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 为epoll实现register等方法</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_EPoll</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">          <span class=\"keyword\">pass</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">register</span><span class=\"params\">(self, fd, events)</span>:</span></div><div class=\"line\">          <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 为select实现register等方法</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_Select</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">          <span class=\"keyword\">pass</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">register</span><span class=\"params\">(self, fd, events)</span>:</span></div><div class=\"line\">          <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 选择系统的事件循环机制</span></div><div class=\"line\"><span class=\"keyword\">if</span> hasattr(select, ‘epoll’):</div><div class=\"line\">     _poll = select.epoll</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">     <span class=\"keyword\">try</span>:</div><div class=\"line\">          <span class=\"keyword\">import</span> epoll</div><div class=\"line\">          _poll = _EPoll</div><div class=\"line\">     <span class=\"keyword\">except</span>:</div><div class=\"line\">          <span class=\"keyword\">import</span> sys</div><div class=\"line\">          _poll = _Select</div></pre></td></tr></table></figure></p>\n<h4 id=\"iostream\"><a href=\"#iostream\" class=\"headerlink\" title=\"iostream\"></a>iostream</h4><p>ioloop实例调用add_handler，为socket的指定事件注册了一个处理器： _handle_events()。<br>_handle_events这个处理器中，为每一个HTTP连接创建一个socket，然后创建一个iostream对象来操作（读写）该socket。Tornado把iostream的操作包装进了HTTPConnection，在HTTPConnection中处理该HTTP连接的header，body等。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IOStream</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">     <span class=\"comment\"># 把socket传入进来，为其封装一个iostream对象，通过iostream对象来操作socket</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, socket, io_loop=None)</span>:</span></div><div class=\"line\">          self.socket = socket</div><div class=\"line\">          self._read_buffer = <span class=\"string\">''</span></div><div class=\"line\">          self._write_buffer = <span class=\"string\">''</span></div><div class=\"line\">          self._read_bytes = <span class=\"keyword\">None</span></div><div class=\"line\">          self.io_loop = io_loop <span class=\"keyword\">or</span> ioloop.IOLoop.instance()</div><div class=\"line\">          self._state = self.io_loop.ERROR</div><div class=\"line\">          <span class=\"comment\"># 添加处理器，在ioloop上监听socket事件</span></div><div class=\"line\">          self.io_loop.add_handler(self.socket.fileno(), self._handle_events, self._state)</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\"># 一旦socket就绪，ioloop根据不同的事件，来调度不同的处理器进行socket的read/write操作</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_handle_events</span><span class=\"params\">(self, fd, events)</span>:</span></div><div class=\"line\">          <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.socket:</div><div class=\"line\">               logging.warnning(‘Got events <span class=\"keyword\">for</span> closed stream %d’, fd)</div><div class=\"line\">               <span class=\"keyword\">return</span></div><div class=\"line\">          <span class=\"keyword\">if</span> events &amp; self.io_loop.READ:</div><div class=\"line\">               self._handle_read()</div><div class=\"line\">          <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.socket:</div><div class=\"line\">               <span class=\"keyword\">return</span></div><div class=\"line\">          <span class=\"keyword\">if</span> events &amp; self.io_loop.WRITE:</div><div class=\"line\">               self._handle_write()</div><div class=\"line\">          <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.socket:</div><div class=\"line\">               <span class=\"keyword\">return</span></div><div class=\"line\">          <span class=\"keyword\">if</span> events &amp; self.io_loop.ERROR:</div><div class=\"line\">               self.close()</div><div class=\"line\">               <span class=\"keyword\">return</span></div><div class=\"line\"></div><div class=\"line\">          state = self.io_loop.ERROR</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">if</span> self._read_delimiter <span class=\"keyword\">or</span> self._ready_bytes:</div><div class=\"line\">               state |= self.io_loop.READ</div><div class=\"line\">          <span class=\"keyword\">if</span> self._write_buffer:</div><div class=\"line\">               state |= self.io_loop.WRITE</div><div class=\"line\">          <span class=\"keyword\">if</span> state != self._state:</div><div class=\"line\">               self._state = state</div><div class=\"line\">               self.io_loop.update_handler(self.socket.fileno(), self._state)</div><div class=\"line\">     </div><div class=\"line\">     <span class=\"comment\"># 进入处理流程</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_handle_read</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            chunk = self.socket.recv(self.read_chunk_size)</div><div class=\"line\">        <span class=\"keyword\">except</span> socket.error, e:</div><div class=\"line\">            self.close()</div><div class=\"line\">            <span class=\"keyword\">return</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> chunk:</div><div class=\"line\">            self.close()</div><div class=\"line\">            <span class=\"keyword\">return</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\"># 把从socket中读到的数据写入缓冲区</span></div><div class=\"line\">        self._read_buffer += chunk</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\"># 执行回调，消费缓冲区中的数据</span></div><div class=\"line\">        <span class=\"keyword\">if</span> self._read_bytes:</div><div class=\"line\">            self._run_callback(callback, self._consume(num_bytes))</div><div class=\"line\">        <span class=\"keyword\">elif</span> self._read_delimiter:</div><div class=\"line\">            self._run_callback(callback, self._consume(loc+delimiter_len))</div></pre></td></tr></table></figure></p>\n<h4 id=\"HTTPConnection\"><a href=\"#HTTPConnection\" class=\"headerlink\" title=\"HTTPConnection\"></a>HTTPConnection</h4><p>ioloop中，接受一个socket，为其创建iostream对象，然后把iostream对象传入HTTPConnection，由HTTPConnection对象来操作iostream对象。<br>底层的是socket；其上层是iostream对象，它对socket的操作进行了封装；再上层是HTTPConnection，由它来处理iostream对象。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HTTPConnection</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, stream, address, request_callback)</span>:</span></div><div class=\"line\">          self.stream = stream</div><div class=\"line\">          self.address = address</div><div class=\"line\">          self.request_callback = request_callback</div><div class=\"line\">          self._request = <span class=\"keyword\">None</span></div><div class=\"line\">          self._request_finished = <span class=\"keyword\">False</span></div><div class=\"line\">          self.stream.read_until(‘\\r\\n\\r\\n’, self._on_headers)</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\"># 把数据（chunk）写入该stream，数据写入完毕，执行callback函数 _on_write_complete</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">write</span><span class=\"params\">(self, chunk)</span>:</span></div><div class=\"line\">          <span class=\"keyword\">assert</span> self._request, <span class=\"string\">'Request closed'</span></div><div class=\"line\">          self.stream.write(chunk, self._on_write_complete)</div></pre></td></tr></table></figure></p>\n<h3 id=\"二、1-0版本中的新变化\"><a href=\"#二、1-0版本中的新变化\" class=\"headerlink\" title=\"二、1.0版本中的新变化\"></a>二、1.0版本中的新变化</h3><h4 id=\"HTTPServer模块中重构了listen-方法\"><a href=\"#HTTPServer模块中重构了listen-方法\" class=\"headerlink\" title=\"HTTPServer模块中重构了listen()方法\"></a>HTTPServer模块中重构了listen()方法</h4><p>函数应该尽可能的功能单一，所以函数体一般要足够小，功能复杂的函数可以进行拆解成几个函数。HTTPServer中的listen()拆解成了bind()和start()两个函数。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">listen</span><span class=\"params\">(self, port, address=<span class=\"string\">''</span>)</span>:</span></div><div class=\"line\">    self.bind(port, address)</div><div class=\"line\">    self.start(<span class=\"number\">1</span>)</div></pre></td></tr></table></figure></p>\n<p>跟socket有关的部分拆分到了bind()方法中，socket处理器注册的部分拆分到了start()方法中，并进行了功能扩充：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bind</span><span class=\"params\">(self, port, address=<span class=\"string\">''</span>)</span>:</span></div><div class=\"line\">     <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 功能扩充，支持多进程。默认使用单进程。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start</span><span class=\"params\">(self, num_processes=<span class=\"number\">1</span>)</span>:</span></div><div class=\"line\">     <span class=\"comment\"># 若传入的处理器数不合法（None或小于等于0），获取服务器的处理器数</span></div><div class=\"line\">     <span class=\"keyword\">if</span> num_processes <span class=\"keyword\">is</span> <span class=\"keyword\">None</span> <span class=\"keyword\">or</span> num_process &lt;= <span class=\"number\">0</span>:</div><div class=\"line\">          <span class=\"keyword\">try</span>:</div><div class=\"line\">               num_processes = os.sysconf(<span class=\"string\">'SC_NPROCESSORS_CONF'</span>)</div><div class=\"line\">          <span class=\"keyword\">except</span> ValueError:</div><div class=\"line\">               num_processes = <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\"># 若处理器数大于1，判断ioloop实例是否已被创建</span></div><div class=\"line\">     <span class=\"keyword\">if</span> num_processes &gt; <span class=\"number\">1</span> <span class=\"keyword\">and</span> ioloop.IOLoop.initialized():</div><div class=\"line\">          num_processes = <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\"># fork出num_processes个子进程，为每一个子进程创建一个ioloop实例</span></div><div class=\"line\">     <span class=\"keyword\">if</span> num_processes &gt; <span class=\"number\">1</span>:</div><div class=\"line\">          <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(num_processes):</div><div class=\"line\">               <span class=\"keyword\">if</span> os.fork() == <span class=\"number\">0</span>:</div><div class=\"line\">                    self.ioloop = ioloop.IOLoop.instance()</div><div class=\"line\">                    self.ioloop.add_handler(...)</div><div class=\"line\">                    <span class=\"keyword\">return</span></div><div class=\"line\">          os.waitpid(<span class=\"number\">-1</span>, <span class=\"number\">0</span>)</div><div class=\"line\">     <span class=\"keyword\">else</span>:</div><div class=\"line\">          <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.ioloop:</div><div class=\"line\">               self.ioloop = ioloop.IOLoop.instance()</div><div class=\"line\">          self.ioloop.add_handler(...)</div></pre></td></tr></table></figure></p>\n<h4 id=\"ioloop中新增了PeriodicCallback\"><a href=\"#ioloop中新增了PeriodicCallback\" class=\"headerlink\" title=\"ioloop中新增了PeriodicCallback\"></a>ioloop中新增了PeriodicCallback</h4><p>该类用于周期性的调度某些任务。最开始的目的应该是支持autoreload，当Tornado的某个模块被修改时，自动重启ioloop实例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeriodicCallback</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(callback, callback_time, io_loop=None)</span>:</span></div><div class=\"line\">          self.callback = callback</div><div class=\"line\">          self.callback_time = callback_time</div><div class=\"line\">          self.io_loop = io_loop <span class=\"keyword\">or</span> IOLoop.instance()</div><div class=\"line\">          self._running = <span class=\"keyword\">True</span></div><div class=\"line\"></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">          timeout = time.time() + self.callback_time / <span class=\"number\">1000.0</span></div><div class=\"line\">          self.io_loop.add_timeout(timeout, self._run)</div><div class=\"line\"></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_run</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">          <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self._running; <span class=\"keyword\">return</span></div><div class=\"line\">          <span class=\"keyword\">try</span>:</div><div class=\"line\">               self.callback()</div><div class=\"line\">          <span class=\"keyword\">except</span> (KeyboardInput, SystemExit):</div><div class=\"line\">               <span class=\"keyword\">raise</span></div><div class=\"line\">          <span class=\"keyword\">except</span>:</div><div class=\"line\">               logging.error(‘Error <span class=\"keyword\">in</span> periodic callback’, exc_info=<span class=\"keyword\">True</span>)</div><div class=\"line\"></div><div class=\"line\">          self.start()</div></pre></td></tr></table></figure></p>\n<p>ioloop中对它的调度：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IOLoop</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">     <span class=\"comment\"># 初始化的时候，_timeouts为空列表</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, ipml=None)</span>:</span></div><div class=\"line\">          self._timeouts = []</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\"># 启动ioloop</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">          <span class=\"comment\"># ioloop进入死循环</span></div><div class=\"line\">          <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">               poll_timeout = <span class=\"number\">0.2</span></div><div class=\"line\"></div><div class=\"line\">               <span class=\"comment\"># 检查 _callbacks 中是否有数据写入，并进入处理流程</span></div><div class=\"line\">               callbacks = list(self._callbacks)</div><div class=\"line\">               <span class=\"keyword\">for</span> callback <span class=\"keyword\">in</span> callbacks:</div><div class=\"line\">                    <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\">               <span class=\"comment\"># 检查 _timeouts 中是否有数据写入，计算时间戳并比较，若过期则执行callback</span></div><div class=\"line\">               <span class=\"keyword\">if</span> self._timeouts:</div><div class=\"line\">                    now = time.time()</div><div class=\"line\">                    <span class=\"keyword\">while</span> self._timeouts <span class=\"keyword\">and</span> self._timeouts[<span class=\"number\">0</span>].deadline &lt;= now:</div><div class=\"line\">                         timeout = self._timeouts.pop(<span class=\"number\">0</span>)</div><div class=\"line\">                         self._run_callback(timeout.callback)</div><div class=\"line\">                    <span class=\"keyword\">if</span> self._timeouts:</div><div class=\"line\">                         milliseconds = self._timeouts[<span class=\"number\">0</span>].deadline - now</div><div class=\"line\">                         poll_timeouts = min(milliseconds, poll_timeout)</div></pre></td></tr></table></figure></p>\n<p>autoreload是如何调用PeriodicCallback的：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start</span><span class=\"params\">(io_loop=None, check_time=<span class=\"number\">500</span>)</span>:</span></div><div class=\"line\">     io_loop = io_loop <span class=\"keyword\">or</span> ioloop.IOLoop.instance()</div><div class=\"line\">     modify_times = &#123;&#125;</div><div class=\"line\">     callback = functools.partial(_reload_on_update, io_loop, modify_times)</div><div class=\"line\">     scheduler = ioloop.PeriodicCallback(callback, check_time, io_loop=io_loop)</div><div class=\"line\">     scheduler.start()</div></pre></td></tr></table></figure></p>\n<p>某些定时执行的任务，我们也可以直接使用它来完成。下面这个示例，每2秒钟打印一次字符串 ‘something’：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_something</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'something'</span>)</div><div class=\"line\">   </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 添加周期性任务到当前的ioloop</span></div><div class=\"line\">    ioloop.PeriodicCallback(print_something, <span class=\"number\">2000</span>).start()</div><div class=\"line\">    <span class=\"comment\"># 启动ioloop</span></div><div class=\"line\">    ioloop.IOLoop.instance().start()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    main()</div></pre></td></tr></table></figure></p>\n<h3 id=\"三、Tornado-2-0\"><a href=\"#三、Tornado-2-0\" class=\"headerlink\" title=\"三、Tornado 2.0\"></a>三、Tornado 2.0</h3><p>2.0中，IOStream使用双端队列对象（deque）来缓冲从socket中读取到的数据，不再使用字符串拼接的方式。性能上是一个大的提升。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IOStream</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"comment\"># 改用用双端队列来缓存数据</span></div><div class=\"line\">        self._read_buffer = collections.deque()</div><div class=\"line\">        self._write_buffer = collections.deque()</div><div class=\"line\">        self._read_bytes = <span class=\"keyword\">None</span></div><div class=\"line\">        </div><div class=\"line\">    <span class=\"comment\"># 相比之前的版本，Tornado对这个函数进行了拆分，这里只处理逻辑，而数据处理工作拆分了出去。</span></div><div class=\"line\">    <span class=\"comment\"># 从socket中读取数据并缓冲，调用函数_read_to_buffer()来完成；消费缓冲中的数据，调用_read_from_buffer()来完成</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_handle_read</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"comment\"># 开启死循环从socket中读取数据</span></div><div class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">            <span class=\"keyword\">try</span>:</div><div class=\"line\">                <span class=\"comment\"># 缓存从socket中读取到的数据</span></div><div class=\"line\">                result = self._read_to_buffer()</div><div class=\"line\">            <span class=\"keyword\">except</span> Exception:</div><div class=\"line\">                self.close()</div><div class=\"line\">                <span class=\"keyword\">return</span></div><div class=\"line\">            </div><div class=\"line\">            <span class=\"keyword\">if</span> result = <span class=\"number\">0</span>:</div><div class=\"line\">                <span class=\"keyword\">break</span></div><div class=\"line\">            <span class=\"keyword\">else</span>:</div><div class=\"line\">                <span class=\"comment\"># 消费缓存中的数据</span></div><div class=\"line\">                <span class=\"keyword\">if</span> self._read_from_buffer():</div><div class=\"line\">                    <span class=\"keyword\">return</span></div><div class=\"line\">                </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_read_to_buffer</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            chunk = self._read_from_socket()</div><div class=\"line\">        <span class=\"keyword\">except</span> socket.error, e:</div><div class=\"line\">            self.close()</div><div class=\"line\">            <span class=\"keyword\">raise</span></div><div class=\"line\">            </div><div class=\"line\">        <span class=\"keyword\">if</span> chunk <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\"># 把读取到的数据添加到队列末尾</span></div><div class=\"line\">        self._read_buffer.append(chunk)</div><div class=\"line\">        self._read_buffer_size += len(chunk)</div><div class=\"line\">        <span class=\"keyword\">if</span> self._read_buffer_size &gt;= self.max_buffer_size:</div><div class=\"line\">            <span class=\"keyword\">pass</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> len(chunk)</div><div class=\"line\">        </div><div class=\"line\">    <span class=\"comment\"># 读取缓冲区中的数据并消费。读取方式有两种：按大小来读取，以及按分隔符来读取</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_read_from_buffer</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> self._read_bytes:</div><div class=\"line\">            <span class=\"keyword\">if</span> self._read_buffer_size &gt;= self._read_bytes:</div><div class=\"line\">                num_bytes = self._read_bytes</div><div class=\"line\">                callback = self._read_callback</div><div class=\"line\">                self._read_callback = <span class=\"keyword\">None</span></div><div class=\"line\">                self._read_bytes = <span class=\"keyword\">None</span></div><div class=\"line\">                self._run_callback(callback, self._consume(num_bytes))</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></div><div class=\"line\">        <span class=\"keyword\">elif</span> self._read_delimiter:</div><div class=\"line\">            <span class=\"comment\"># 合并缓冲队列的头部</span></div><div class=\"line\">            _merge_prefix(self._read_buffer, sys.maxin)</div><div class=\"line\">            loc = self._read_buffer[<span class=\"number\">0</span>].find(self._read_delimiter)</div><div class=\"line\">            <span class=\"keyword\">if</span> loc != <span class=\"number\">-1</span>:</div><div class=\"line\">                callback = self._read_callback</div><div class=\"line\">                delimiter_len = len(self._read_delimiter)</div><div class=\"line\">                self._read_callback = <span class=\"keyword\">None</span></div><div class=\"line\">                self._read_delimiter = <span class=\"keyword\">None</span></div><div class=\"line\">                self._run_callback(callback, self._consume(loc+delimiter_len))</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></div><div class=\"line\">            </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></div></pre></td></tr></table></figure></p>\n<p>_merge_prefix(deque, size)<br>在缓冲数据时，把数据添加到双端队列的尾部，而从缓存中读取数据并消费时，是从头部读取的。那么一次读取多少数据就是个学问了，这个方法可以按照我们的需要，把队列头部的数据组织成合适的大小。</p>\n<p>IOStream模块中多次用到这个函数，如_handle_write()：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_handle_write</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">while</span> self._write_buffer:</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            <span class=\"comment\"># socket发送数据时，每次发送的数据大小不超过128KB</span></div><div class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self._write_buffer_frozen:</div><div class=\"line\">                _merge_prefix(self._write_buffer, <span class=\"number\">128</span>*<span class=\"number\">1024</span>)</div><div class=\"line\">            num_bytes = self.socket.send(self._write_buffer[<span class=\"number\">0</span>])</div><div class=\"line\">        <span class=\"keyword\">except</span> socket.error, e:</div><div class=\"line\">            self.close()</div><div class=\"line\">            <span class=\"keyword\">return</span></div></pre></td></tr></table></figure></p>"},{"title":"pyenv: no such command 'virtualenv-init'","abbrlink":7972,"date":"2016-12-31T15:56:35.000Z","_content":"\nPyenv安装完成后，一般要按照官方文档所述，在~/.bash_profile，或/etc/profile中添加如下配置项：\n\n<!-- more -->\n\n```bash\nexport PATH=\"$HOME/.pyenv/bin:$PATH\"\neval \"$(pyenv init -)\"\neval \"$(pyenv virtualenv-init -)\"\n```\n但是如果Pyenv没有安装在默认位置（~/.pyenv）时，需要export PATH之前设置PYENV_ROOT，否则可能会报错：\n```bash\n\tpyenv: no such command 'virtualenv-init'\n```\n示例：\n```bash\nexport PYENV_ROOT=/usr/local/pyenv\nexport PATH=\"/usr/local/pyenv/bin:$PATH\"\neval \"$(pyenv init -)\"\neval \"$(pyenv virtualenv-init -)\"\n```\n","source":"_posts/pyenv-no-such-command-virtualenv-init.md","raw":"---\ntitle: 'pyenv: no such command ''virtualenv-init'''\ntags: pyenv\ncategories: python\nabbrlink: 7972\ndate: 2016-12-31 23:56:35\n---\n\nPyenv安装完成后，一般要按照官方文档所述，在~/.bash_profile，或/etc/profile中添加如下配置项：\n\n<!-- more -->\n\n```bash\nexport PATH=\"$HOME/.pyenv/bin:$PATH\"\neval \"$(pyenv init -)\"\neval \"$(pyenv virtualenv-init -)\"\n```\n但是如果Pyenv没有安装在默认位置（~/.pyenv）时，需要export PATH之前设置PYENV_ROOT，否则可能会报错：\n```bash\n\tpyenv: no such command 'virtualenv-init'\n```\n示例：\n```bash\nexport PYENV_ROOT=/usr/local/pyenv\nexport PATH=\"/usr/local/pyenv/bin:$PATH\"\neval \"$(pyenv init -)\"\neval \"$(pyenv virtualenv-init -)\"\n```\n","slug":"pyenv-no-such-command-virtualenv-init","published":1,"updated":"2017-04-21T15:58:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1s2ul1p000eatyffio2xzie","content":"<p>Pyenv安装完成后，一般要按照官方文档所述，在~/.bash_profile，或/etc/profile中添加如下配置项：</p>\n<a id=\"more\"></a>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"string\">\"<span class=\"variable\">$HOME</span>/.pyenv/bin:<span class=\"variable\">$PATH</span>\"</span></div><div class=\"line\"><span class=\"built_in\">eval</span> <span class=\"string\">\"<span class=\"variable\">$(pyenv init -)</span>\"</span></div><div class=\"line\"><span class=\"built_in\">eval</span> <span class=\"string\">\"<span class=\"variable\">$(pyenv virtualenv-init -)</span>\"</span></div></pre></td></tr></table></figure>\n<p>但是如果Pyenv没有安装在默认位置（~/.pyenv）时，需要export PATH之前设置PYENV_ROOT，否则可能会报错：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pyenv: no such <span class=\"built_in\">command</span> <span class=\"string\">'virtualenv-init'</span></div></pre></td></tr></table></figure></p>\n<p>示例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> PYENV_ROOT=/usr/<span class=\"built_in\">local</span>/pyenv</div><div class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"string\">\"/usr/local/pyenv/bin:<span class=\"variable\">$PATH</span>\"</span></div><div class=\"line\"><span class=\"built_in\">eval</span> <span class=\"string\">\"<span class=\"variable\">$(pyenv init -)</span>\"</span></div><div class=\"line\"><span class=\"built_in\">eval</span> <span class=\"string\">\"<span class=\"variable\">$(pyenv virtualenv-init -)</span>\"</span></div></pre></td></tr></table></figure></p>\n","excerpt":"<p>Pyenv安装完成后，一般要按照官方文档所述，在~/.bash_profile，或/etc/profile中添加如下配置项：</p>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"string\">\"<span class=\"variable\">$HOME</span>/.pyenv/bin:<span class=\"variable\">$PATH</span>\"</span></div><div class=\"line\"><span class=\"built_in\">eval</span> <span class=\"string\">\"<span class=\"variable\">$(pyenv init -)</span>\"</span></div><div class=\"line\"><span class=\"built_in\">eval</span> <span class=\"string\">\"<span class=\"variable\">$(pyenv virtualenv-init -)</span>\"</span></div></pre></td></tr></table></figure>\n<p>但是如果Pyenv没有安装在默认位置（~/.pyenv）时，需要export PATH之前设置PYENV_ROOT，否则可能会报错：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pyenv: no such <span class=\"built_in\">command</span> <span class=\"string\">'virtualenv-init'</span></div></pre></td></tr></table></figure></p>\n<p>示例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> PYENV_ROOT=/usr/<span class=\"built_in\">local</span>/pyenv</div><div class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"string\">\"/usr/local/pyenv/bin:<span class=\"variable\">$PATH</span>\"</span></div><div class=\"line\"><span class=\"built_in\">eval</span> <span class=\"string\">\"<span class=\"variable\">$(pyenv init -)</span>\"</span></div><div class=\"line\"><span class=\"built_in\">eval</span> <span class=\"string\">\"<span class=\"variable\">$(pyenv virtualenv-init -)</span>\"</span></div></pre></td></tr></table></figure></p>"},{"title":"venv创建python虚拟环境","abbrlink":43617,"date":"2017-01-03T01:59:38.000Z","_content":"pyenv曾经是Python的官方版本管理工具，不过从Python 3.6开始，官方推荐使用venv模块来管理虚拟环境，在使用pyenv创建虚拟环境时会弹出相关提示。\n\n<!-- more -->\n\nPython 3.6前几天刚release，我准备尝个鲜，首要的就是创建虚拟环境。\n\n```python\n\tpython3.6 -m venv ~/.venvs/codex\n\tsource ~/.venvs/codex/bin/activate\n```\n这样就创建并启用了一个Python3.6的虚拟环境，shell界面的最前方会显示当前的虚拟环境名称，这时使用pip安装的包都会安装该虚拟环境下。\n\n退出虚拟环境也很简单，运行下面的命令即可退出当前虚拟环境：\n\n```python\ndeactivate\n```\n\n若需要删除虚拟环境，直接删除相关的目录即可。\n\n","source":"_posts/venv创建python虚拟环境.md","raw":"---\ntitle: venv创建python虚拟环境\ntags:\n  - venv\n  - 虚拟环境\ncategories: python\nabbrlink: 43617\ndate: 2017-01-03 09:59:38\n---\npyenv曾经是Python的官方版本管理工具，不过从Python 3.6开始，官方推荐使用venv模块来管理虚拟环境，在使用pyenv创建虚拟环境时会弹出相关提示。\n\n<!-- more -->\n\nPython 3.6前几天刚release，我准备尝个鲜，首要的就是创建虚拟环境。\n\n```python\n\tpython3.6 -m venv ~/.venvs/codex\n\tsource ~/.venvs/codex/bin/activate\n```\n这样就创建并启用了一个Python3.6的虚拟环境，shell界面的最前方会显示当前的虚拟环境名称，这时使用pip安装的包都会安装该虚拟环境下。\n\n退出虚拟环境也很简单，运行下面的命令即可退出当前虚拟环境：\n\n```python\ndeactivate\n```\n\n若需要删除虚拟环境，直接删除相关的目录即可。\n\n","slug":"venv创建python虚拟环境","published":1,"updated":"2017-04-21T15:58:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1s2ul1u000iatyfygzuziqu","content":"<p>pyenv曾经是Python的官方版本管理工具，不过从Python 3.6开始，官方推荐使用venv模块来管理虚拟环境，在使用pyenv创建虚拟环境时会弹出相关提示。</p>\n<a id=\"more\"></a>\n<p>Python 3.6前几天刚release，我准备尝个鲜，首要的就是创建虚拟环境。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">python3<span class=\"number\">.6</span> -m venv ~/.venvs/codex</div><div class=\"line\">source ~/.venvs/codex/bin/activate</div></pre></td></tr></table></figure>\n<p>这样就创建并启用了一个Python3.6的虚拟环境，shell界面的最前方会显示当前的虚拟环境名称，这时使用pip安装的包都会安装该虚拟环境下。</p>\n<p>退出虚拟环境也很简单，运行下面的命令即可退出当前虚拟环境：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">deactivate</div></pre></td></tr></table></figure>\n<p>若需要删除虚拟环境，直接删除相关的目录即可。</p>\n","excerpt":"<p>pyenv曾经是Python的官方版本管理工具，不过从Python 3.6开始，官方推荐使用venv模块来管理虚拟环境，在使用pyenv创建虚拟环境时会弹出相关提示。</p>","more":"<p>Python 3.6前几天刚release，我准备尝个鲜，首要的就是创建虚拟环境。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">python3<span class=\"number\">.6</span> -m venv ~/.venvs/codex</div><div class=\"line\">source ~/.venvs/codex/bin/activate</div></pre></td></tr></table></figure>\n<p>这样就创建并启用了一个Python3.6的虚拟环境，shell界面的最前方会显示当前的虚拟环境名称，这时使用pip安装的包都会安装该虚拟环境下。</p>\n<p>退出虚拟环境也很简单，运行下面的命令即可退出当前虚拟环境：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">deactivate</div></pre></td></tr></table></figure>\n<p>若需要删除虚拟环境，直接删除相关的目录即可。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj1s2ul0m0000atyfhwcgfw8z","category_id":"cj1s2ul110004atyfufogluif","_id":"cj1s2ul1o000datyfmtk3wl9e"},{"post_id":"cj1s2ul1f0008atyfifonml7m","category_id":"cj1s2ul110004atyfufogluif","_id":"cj1s2ul1u000hatyfxnk0tqce"},{"post_id":"cj1s2ul1m000catyfrxztxmhf","category_id":"cj1s2ul110004atyfufogluif","_id":"cj1s2ul1w000jatyf5a7b4h4b"},{"post_id":"cj1s2ul0u0002atyfjpz96kzd","category_id":"cj1s2ul1k0009atyfzzg8ir0e","_id":"cj1s2ul1y000matyfvy9ks7ja"},{"post_id":"cj1s2ul1p000eatyffio2xzie","category_id":"cj1s2ul110004atyfufogluif","_id":"cj1s2ul1z000natyfg3mhsp0l"},{"post_id":"cj1s2ul1u000iatyfygzuziqu","category_id":"cj1s2ul110004atyfufogluif","_id":"cj1s2ul20000oatyfz9uy89xq"},{"post_id":"cj1s2ul180006atyfu105zymh","category_id":"cj1s2ul1r000fatyfehggpjo1","_id":"cj1s2ul21000ratyf0oe7fnsv"},{"post_id":"cj1s2ul1d0007atyfq4gwmuz0","category_id":"cj1s2ul1x000katyfoynh2skx","_id":"cj1s2ul22000tatyfj0zwxsnl"}],"PostTag":[{"post_id":"cj1s2ul0m0000atyfhwcgfw8z","tag_id":"cj1s2ul170005atyf0ahpjoa0","_id":"cj1s2ul1l000batyfhqumwvm3"},{"post_id":"cj1s2ul0u0002atyfjpz96kzd","tag_id":"cj1s2ul1k000aatyf4ae4orn4","_id":"cj1s2ul21000qatyf23xtnxvr"},{"post_id":"cj1s2ul0u0002atyfjpz96kzd","tag_id":"cj1s2ul1t000gatyftkmd1hac","_id":"cj1s2ul21000satyftcj8t0zh"},{"post_id":"cj1s2ul0u0002atyfjpz96kzd","tag_id":"cj1s2ul1x000latyfubj8qnh1","_id":"cj1s2ul24000vatyfvjvgwmj9"},{"post_id":"cj1s2ul180006atyfu105zymh","tag_id":"cj1s2ul20000patyfgbmtzrvc","_id":"cj1s2ul24000watyfs46v41ds"},{"post_id":"cj1s2ul1d0007atyfq4gwmuz0","tag_id":"cj1s2ul23000uatyfoykmyl6h","_id":"cj1s2ul25000yatyfq1em9r13"},{"post_id":"cj1s2ul1f0008atyfifonml7m","tag_id":"cj1s2ul25000xatyfibngqmtc","_id":"cj1s2ul260011atyfr44j5mxm"},{"post_id":"cj1s2ul1f0008atyfifonml7m","tag_id":"cj1s2ul26000zatyfkvijj2j7","_id":"cj1s2ul260012atyf824jfj4b"},{"post_id":"cj1s2ul1m000catyfrxztxmhf","tag_id":"cj1s2ul260010atyfserl3sa4","_id":"cj1s2ul270014atyfqd2s2lhp"},{"post_id":"cj1s2ul1p000eatyffio2xzie","tag_id":"cj1s2ul260013atyf067i3qa5","_id":"cj1s2ul270016atyf2arqhk3c"},{"post_id":"cj1s2ul1u000iatyfygzuziqu","tag_id":"cj1s2ul270015atyfd5mxb5li","_id":"cj1s2ul280018atyfq1puvlze"},{"post_id":"cj1s2ul1u000iatyfygzuziqu","tag_id":"cj1s2ul280017atyfevefil7z","_id":"cj1s2ul280019atyfll6g2ana"}],"Tag":[{"name":"装饰器","_id":"cj1s2ul170005atyf0ahpjoa0"},{"name":"java","_id":"cj1s2ul1k000aatyf4ae4orn4"},{"name":"spring","_id":"cj1s2ul1t000gatyftkmd1hac"},{"name":"阅读笔记","_id":"cj1s2ul1x000latyfubj8qnh1"},{"name":"随笔","_id":"cj1s2ul20000patyfgbmtzrvc"},{"name":"c++","_id":"cj1s2ul23000uatyfoykmyl6h"},{"name":"生成器","_id":"cj1s2ul25000xatyfibngqmtc"},{"name":"多进程","_id":"cj1s2ul26000zatyfkvijj2j7"},{"name":"tornado","_id":"cj1s2ul260010atyfserl3sa4"},{"name":"pyenv","_id":"cj1s2ul260013atyf067i3qa5"},{"name":"venv","_id":"cj1s2ul270015atyfd5mxb5li"},{"name":"虚拟环境","_id":"cj1s2ul280017atyfevefil7z"}]}}